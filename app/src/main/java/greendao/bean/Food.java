package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.FoodDao;
import greendao.dao.GuideDao;
import greendao.dao.PlaceDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "FOOD".
 */
public class Food implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private Integer index;
    private Integer comments;
    private Integer likes;
    private String desc;
    private String title;
    private String rowStatus;
    private String photos;
    private String places;
    private Integer suggestedPrice;
    private String cuisines;
    private Double rating;
    private String urls;
    private String createdAt;
    private String updatedAt;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FoodDao myDao;

    private Guide guide;
    private String guide__resolvedKey;

    private List<Place> placeList;
    private List<Document> foodPhotoList;

    public Food() {
    }

    public Food(String objectId) {
        this.objectId = objectId;
    }

    public Food(String objectId, Integer index, Integer comments, Integer likes, String desc, String title, String rowStatus, String photos, String places, Integer suggestedPrice, String cuisines, Double rating, String urls, String createdAt, String updatedAt, String guideId) {
        this.objectId = objectId;
        this.index = index;
        this.comments = comments;
        this.likes = likes;
        this.desc = desc;
        this.title = title;
        this.rowStatus = rowStatus;
        this.photos = photos;
        this.places = places;
        this.suggestedPrice = suggestedPrice;
        this.cuisines = cuisines;
        this.rating = rating;
        this.urls = urls;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.guideId = guideId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFoodDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getPhotos() {
        return photos;
    }

    public void setPhotos(String photos) {
        this.photos = photos;
    }

    public String getPlaces() {
        return places;
    }

    public void setPlaces(String places) {
        this.places = places;
    }

    public Integer getSuggestedPrice() {
        return suggestedPrice;
    }

    public void setSuggestedPrice(Integer suggestedPrice) {
        this.suggestedPrice = suggestedPrice;
    }

    public String getCuisines() {
        return cuisines;
    }

    public void setCuisines(String cuisines) {
        this.cuisines = cuisines;
    }

    public Double getRating() {
        return rating;
    }

    public void setRating(Double rating) {
        this.rating = rating;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
                guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Place> getPlaceList() {
        if (placeList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            List<Place> placeListNew = targetDao._queryFood_PlaceList(objectId);
            synchronized (this) {
                if(placeList == null) {
                    placeList = placeListNew;
                }
            }
        }
        return placeList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlaceList() {
        placeList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getFoodPhotoList() {
        if (foodPhotoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> foodPhotoListNew = targetDao._queryFood_FoodPhotoList(objectId);
            synchronized (this) {
                if(foodPhotoList == null) {
                    foodPhotoList = foodPhotoListNew;
                }
            }
        }
        return foodPhotoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFoodPhotoList() {
        foodPhotoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }



    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(this.objectId);
        dest.writeValue(this.index);
        dest.writeValue(this.comments);
        dest.writeValue(this.likes);
        dest.writeString(this.desc);
        dest.writeString(this.title);
        dest.writeString(this.rowStatus);
        dest.writeString(this.photos);
        dest.writeString(this.places);
        dest.writeValue(this.suggestedPrice);
        dest.writeString(this.cuisines);
        dest.writeValue(this.rating);
        dest.writeString(this.urls);
        dest.writeString(this.createdAt);
        dest.writeString(this.updatedAt);
        dest.writeString(this.guideId);
        dest.writeParcelable(this.guide, flags);
        dest.writeString(this.guide__resolvedKey);
        dest.writeTypedList(this.placeList);
        dest.writeList(this.foodPhotoList);
    }

    protected Food(Parcel in) {
        this.objectId = in.readString();
        this.index = (Integer) in.readValue(Integer.class.getClassLoader());
        this.comments = (Integer) in.readValue(Integer.class.getClassLoader());
        this.likes = (Integer) in.readValue(Integer.class.getClassLoader());
        this.desc = in.readString();
        this.title = in.readString();
        this.rowStatus = in.readString();
        this.photos = in.readString();
        this.places = in.readString();
        this.suggestedPrice = (Integer) in.readValue(Integer.class.getClassLoader());
        this.cuisines = in.readString();
        this.rating = (Double) in.readValue(Double.class.getClassLoader());
        this.urls = in.readString();
        this.createdAt = in.readString();
        this.updatedAt = in.readString();
        this.guideId = in.readString();
        this.guide = in.readParcelable(Guide.class.getClassLoader());
        this.guide__resolvedKey = in.readString();
        this.placeList = in.createTypedArrayList(Place.CREATOR);
        this.foodPhotoList = new ArrayList<Document>();
        in.readList(this.foodPhotoList, Document.class.getClassLoader());
    }

    public static final Creator<Food> CREATOR = new Creator<Food>() {
        @Override
        public Food createFromParcel(Parcel source) {
            return new Food(source);
        }

        @Override
        public Food[] newArray(int size) {
            return new Food[size];
        }
    };

}
