package greendao.bean;

import java.io.Serializable;
import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.ArticleDao;
import greendao.dao.DaoSession;
import greendao.dao.GuideDao;
import greendao.dao.VisaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "VISA".
 */
public class Visa implements Serializable {

    /** Not-null value. */
    private String objectId;
    private String visaCode;
    private String desc;
    private Integer index;
    private String title;
    private String rowStatus;
    private String country;
    private String articles;
    private String createdAt;
    private String updatedAt;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VisaDao myDao;

    private Guide guide;
    private String guide__resolvedKey;

    private List<Article> articlesList;

    public Visa() {
    }

    public Visa(String objectId) {
        this.objectId = objectId;
    }

    public Visa(String objectId, String visaCode, String desc, Integer index, String title, String rowStatus, String country, String articles, String createdAt, String updatedAt, String guideId) {
        this.objectId = objectId;
        this.visaCode = visaCode;
        this.desc = desc;
        this.index = index;
        this.title = title;
        this.rowStatus = rowStatus;
        this.country = country;
        this.articles = articles;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.guideId = guideId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVisaDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getVisaCode() {
        return visaCode;
    }

    public void setVisaCode(String visaCode) {
        this.visaCode = visaCode;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getArticles() {
        return articles;
    }

    public void setArticles(String articles) {
        this.articles = articles;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
                guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Article> getArticlesList() {
        if (articlesList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleDao targetDao = daoSession.getArticleDao();
            List<Article> articlesListNew = targetDao._queryVisa_ArticlesList(objectId);
            synchronized (this) {
                if(articlesList == null) {
                    articlesList = articlesListNew;
                }
            }
        }
        return articlesList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetArticlesList() {
        articlesList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
