package greendao.bean;

import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.MenuDao;
import greendao.dao.MenuItemDao;
import greendao.dao.MenuSectionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "MENU_SECTION".
 */
public class MenuSection {

    /** Not-null value. */
    private String objectId;
    private String desc;
    private Integer index;
    private String descCn;
    private String title;
    private String titleCn;
    private String rowStatus;
    private String items;
    private String createdAt;
    private String updatedAt;
    private String menuId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MenuSectionDao myDao;

    private Menu menu;
    private String menu__resolvedKey;

    private List<MenuItem> menuItemList;

    public MenuSection() {
    }

    public MenuSection(String objectId) {
        this.objectId = objectId;
    }

    public MenuSection(String objectId, String desc, Integer index, String descCn, String title, String titleCn, String rowStatus, String items, String createdAt, String updatedAt, String menuId) {
        this.objectId = objectId;
        this.desc = desc;
        this.index = index;
        this.descCn = descCn;
        this.title = title;
        this.titleCn = titleCn;
        this.rowStatus = rowStatus;
        this.items = items;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.menuId = menuId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMenuSectionDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public String getDescCn() {
        return descCn;
    }

    public void setDescCn(String descCn) {
        this.descCn = descCn;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getTitleCn() {
        return titleCn;
    }

    public void setTitleCn(String titleCn) {
        this.titleCn = titleCn;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getItems() {
        return items;
    }

    public void setItems(String items) {
        this.items = items;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getMenuId() {
        return menuId;
    }

    public void setMenuId(String menuId) {
        this.menuId = menuId;
    }

    /** To-one relationship, resolved on first access. */
    public Menu getMenu() {
        String __key = this.menuId;
        if (menu__resolvedKey == null || menu__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuDao targetDao = daoSession.getMenuDao();
            Menu menuNew = targetDao.load(__key);
            synchronized (this) {
                menu = menuNew;
            	menu__resolvedKey = __key;
            }
        }
        return menu;
    }

    public void setMenu(Menu menu) {
        synchronized (this) {
            this.menu = menu;
            menuId = menu == null ? null : menu.getObjectId();
            menu__resolvedKey = menuId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MenuItem> getMenuItemList() {
        if (menuItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuItemDao targetDao = daoSession.getMenuItemDao();
            List<MenuItem> menuItemListNew = targetDao._queryMenuSection_MenuItemList(objectId);
            synchronized (this) {
                if(menuItemList == null) {
                    menuItemList = menuItemListNew;
                }
            }
        }
        return menuItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMenuItemList() {
        menuItemList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
