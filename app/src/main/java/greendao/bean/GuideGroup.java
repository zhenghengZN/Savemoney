package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.GuideDao;
import greendao.dao.GuideGroupDao;
import greendao.dao.LocationDao;
import greendao.dao.PlaceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "GUIDE_GROUP".
 */
public class GuideGroup implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private String index;
    private String title;
    private Boolean isCityGuideTab;
    private String rowStatus;
    private String city;
    private String guides;
    private String createdAt;
    private String updatedAt;
    private String cloudId;
    private String placeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GuideGroupDao myDao;

    private Location location;
    private String location__resolvedKey;

    private Place place;
    private String place__resolvedKey;

    private List<Guide> guideList;

    public GuideGroup() {
    }

    public GuideGroup(String objectId) {
        this.objectId = objectId;
    }

    public GuideGroup(String objectId, String index, String title, Boolean isCityGuideTab, String rowStatus, String city, String guides, String createdAt, String updatedAt, String cloudId, String placeId) {
        this.objectId = objectId;
        this.index = index;
        this.title = title;
        this.isCityGuideTab = isCityGuideTab;
        this.rowStatus = rowStatus;
        this.city = city;
        this.guides = guides;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.cloudId = cloudId;
        this.placeId = placeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGuideGroupDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getIndex() {
        return index;
    }

    public void setIndex(String index) {
        this.index = index;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Boolean getIsCityGuideTab() {
        return isCityGuideTab;
    }

    public void setIsCityGuideTab(Boolean isCityGuideTab) {
        this.isCityGuideTab = isCityGuideTab;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getGuides() {
        return guides;
    }

    public void setGuides(String guides) {
        this.guides = guides;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getCloudId() {
        return cloudId;
    }

    public void setCloudId(String cloudId) {
        this.cloudId = cloudId;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    /** To-one relationship, resolved on first access. */
    public Location getLocation() {
        String __key = this.cloudId;
        if (location__resolvedKey == null || location__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationDao targetDao = daoSession.getLocationDao();
            Location locationNew = targetDao.load(__key);
            synchronized (this) {
                location = locationNew;
                location__resolvedKey = __key;
            }
        }
        return location;
    }

    public void setLocation(Location location) {
        synchronized (this) {
            this.location = location;
            cloudId = location == null ? null : location.getCloudId();
            location__resolvedKey = cloudId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        String __key = this.placeId;
        if (place__resolvedKey == null || place__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
                place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        synchronized (this) {
            this.place = place;
            placeId = place == null ? null : place.getObjectId();
            place__resolvedKey = placeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Guide> getGuideList() {
        if (guideList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            List<Guide> guideListNew = targetDao._queryGuideGroup_GuideList(objectId);
            synchronized (this) {
                if(guideList == null) {
                    guideList = guideListNew;
                }
            }
        }
        return guideList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGuideList() {
        guideList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(this.objectId);
        dest.writeString(this.index);
        dest.writeString(this.title);
        dest.writeValue(this.isCityGuideTab);
        dest.writeString(this.rowStatus);
        dest.writeString(this.city);
        dest.writeString(this.guides);
        dest.writeString(this.createdAt);
        dest.writeString(this.updatedAt);
        dest.writeString(this.cloudId);
        dest.writeString(this.placeId);
        dest.writeParcelable(this.location, flags);
        dest.writeString(this.location__resolvedKey);
        dest.writeParcelable(this.place, flags);
        dest.writeString(this.place__resolvedKey);
        dest.writeList(this.guideList);
    }

    protected GuideGroup(Parcel in) {
        this.objectId = in.readString();
        this.index = in.readString();
        this.title = in.readString();
        this.isCityGuideTab = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.rowStatus = in.readString();
        this.city = in.readString();
        this.guides = in.readString();
        this.createdAt = in.readString();
        this.updatedAt = in.readString();
        this.cloudId = in.readString();
        this.placeId = in.readString();
        this.location = in.readParcelable(Location.class.getClassLoader());
        this.location__resolvedKey = in.readString();
        this.place = in.readParcelable(Place.class.getClassLoader());
        this.place__resolvedKey = in.readString();
        this.guideList = new ArrayList<Guide>();
        in.readList(this.guideList, Guide.class.getClassLoader());
    }

    public static final Creator<GuideGroup> CREATOR = new Creator<GuideGroup>() {
        @Override
        public GuideGroup createFromParcel(Parcel source) {
            return new GuideGroup(source);
        }

        @Override
        public GuideGroup[] newArray(int size) {
            return new GuideGroup[size];
        }
    };
}
