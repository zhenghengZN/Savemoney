package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import de.greenrobot.dao.DaoException;
import greendao.dao.AppDao;
import greendao.dao.DaoSession;
import greendao.dao.GuideDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "APP".
 */
public class App implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private String desc;
    private String androidLink;
    private String ipadLink;
    private String title;
    private String appUrl;
    private Integer weight;
    private Integer comments;
    private Integer likes;
    private String logo;
    private String rowStatus;
    private String iphoneLink;
    private String createdAt;
    private String updatedAt;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AppDao myDao;

    private Guide guide;
    private String guide__resolvedKey;


    public App() {
    }

    public App(String objectId) {
        this.objectId = objectId;
    }

    public App(String objectId, String desc, String androidLink, String ipadLink, String title, String appUrl, Integer weight, Integer comments, Integer likes, String logo, String rowStatus, String iphoneLink, String createdAt, String updatedAt, String guideId) {
        this.objectId = objectId;
        this.desc = desc;
        this.androidLink = androidLink;
        this.ipadLink = ipadLink;
        this.title = title;
        this.appUrl = appUrl;
        this.weight = weight;
        this.comments = comments;
        this.likes = likes;
        this.logo = logo;
        this.rowStatus = rowStatus;
        this.iphoneLink = iphoneLink;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.guideId = guideId;
    }

    protected App(Parcel in) {
        objectId = in.readString();
        desc = in.readString();
        androidLink = in.readString();
        ipadLink = in.readString();
        title = in.readString();
        appUrl = in.readString();
        logo = in.readString();
        rowStatus = in.readString();
        iphoneLink = in.readString();
        createdAt = in.readString();
        updatedAt = in.readString();
        guideId = in.readString();
        guide = in.readParcelable(Guide.class.getClassLoader());
        guide__resolvedKey = in.readString();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(objectId);
        dest.writeString(desc);
        dest.writeString(androidLink);
        dest.writeString(ipadLink);
        dest.writeString(title);
        dest.writeString(appUrl);
        dest.writeString(logo);
        dest.writeString(rowStatus);
        dest.writeString(iphoneLink);
        dest.writeString(createdAt);
        dest.writeString(updatedAt);
        dest.writeString(guideId);
        dest.writeParcelable(guide, flags);
        dest.writeString(guide__resolvedKey);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<App> CREATOR = new Creator<App>() {
        @Override
        public App createFromParcel(Parcel in) {
            return new App(in);
        }

        @Override
        public App[] newArray(int size) {
            return new App[size];
        }
    };

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAppDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getAndroidLink() {
        return androidLink;
    }

    public void setAndroidLink(String androidLink) {
        this.androidLink = androidLink;
    }

    public String getIpadLink() {
        return ipadLink;
    }

    public void setIpadLink(String ipadLink) {
        this.ipadLink = ipadLink;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAppUrl() {
        return appUrl;
    }

    public void setAppUrl(String appUrl) {
        this.appUrl = appUrl;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getIphoneLink() {
        return iphoneLink;
    }

    public void setIphoneLink(String iphoneLink) {
        this.iphoneLink = iphoneLink;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
            	guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
