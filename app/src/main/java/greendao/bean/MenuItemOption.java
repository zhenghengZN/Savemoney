package greendao.bean;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.MenuItemDao;
import greendao.dao.MenuItemOptionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "MENU_ITEM_OPTION".
 */
public class MenuItemOption {

    /** Not-null value. */
    private String objectId;
    private String titleCn;
    private String title;
    private String rowStatus;
    private String item;
    private String createdAt;
    private String updatedAt;
    private String menuItemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MenuItemOptionDao myDao;

    private MenuItem menuItem;
    private String menuItem__resolvedKey;


    public MenuItemOption() {
    }

    public MenuItemOption(String objectId) {
        this.objectId = objectId;
    }

    public MenuItemOption(String objectId, String titleCn, String title, String rowStatus, String item, String createdAt, String updatedAt, String menuItemId) {
        this.objectId = objectId;
        this.titleCn = titleCn;
        this.title = title;
        this.rowStatus = rowStatus;
        this.item = item;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.menuItemId = menuItemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMenuItemOptionDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getTitleCn() {
        return titleCn;
    }

    public void setTitleCn(String titleCn) {
        this.titleCn = titleCn;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getItem() {
        return item;
    }

    public void setItem(String item) {
        this.item = item;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getMenuItemId() {
        return menuItemId;
    }

    public void setMenuItemId(String menuItemId) {
        this.menuItemId = menuItemId;
    }

    /** To-one relationship, resolved on first access. */
    public MenuItem getMenuItem() {
        String __key = this.menuItemId;
        if (menuItem__resolvedKey == null || menuItem__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuItemDao targetDao = daoSession.getMenuItemDao();
            MenuItem menuItemNew = targetDao.load(__key);
            synchronized (this) {
                menuItem = menuItemNew;
            	menuItem__resolvedKey = __key;
            }
        }
        return menuItem;
    }

    public void setMenuItem(MenuItem menuItem) {
        synchronized (this) {
            this.menuItem = menuItem;
            menuItemId = menuItem == null ? null : menuItem.getObjectId();
            menuItem__resolvedKey = menuItemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
