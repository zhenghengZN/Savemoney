package greendao.bean;

import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.MenuDao;
import greendao.dao.PlaceDao;
import greendao.dao.RestaurantDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "RESTAURANT".
 */
public class Restaurant {

    /** Not-null value. */
    private String objectId;
    private String diningStyle;
    private String paymentOptions;
    private String desc;
    private String dressCode;
    private String payment;
    private String cuisines;
    private Integer priceRangeFrom;
    private String executiveChef;
    private String specialEventsAndPromotions;
    private String area;
    private Integer priceRangeTo;
    private Integer average;
    private String parkingDetails;
    private String additional;
    private String publicTransport;
    private String menus;
    private String zomato;
    private String openTable;
    private String createdAt;
    private String updatedAt;
    private String placeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RestaurantDao myDao;

    private Place place;
    private String place__resolvedKey;

    private List<Menu> menuList;

    public Restaurant() {
    }

    public Restaurant(String objectId) {
        this.objectId = objectId;
    }

    public Restaurant(String objectId, String diningStyle, String paymentOptions, String desc, String dressCode, String payment, String cuisines, Integer priceRangeFrom, String executiveChef, String specialEventsAndPromotions, String area, Integer priceRangeTo, Integer average, String parkingDetails, String additional, String publicTransport, String menus, String zomato, String openTable, String createdAt, String updatedAt, String placeId) {
        this.objectId = objectId;
        this.diningStyle = diningStyle;
        this.paymentOptions = paymentOptions;
        this.desc = desc;
        this.dressCode = dressCode;
        this.payment = payment;
        this.cuisines = cuisines;
        this.priceRangeFrom = priceRangeFrom;
        this.executiveChef = executiveChef;
        this.specialEventsAndPromotions = specialEventsAndPromotions;
        this.area = area;
        this.priceRangeTo = priceRangeTo;
        this.average = average;
        this.parkingDetails = parkingDetails;
        this.additional = additional;
        this.publicTransport = publicTransport;
        this.menus = menus;
        this.zomato = zomato;
        this.openTable = openTable;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.placeId = placeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRestaurantDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDiningStyle() {
        return diningStyle;
    }

    public void setDiningStyle(String diningStyle) {
        this.diningStyle = diningStyle;
    }

    public String getPaymentOptions() {
        return paymentOptions;
    }

    public void setPaymentOptions(String paymentOptions) {
        this.paymentOptions = paymentOptions;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getDressCode() {
        return dressCode;
    }

    public void setDressCode(String dressCode) {
        this.dressCode = dressCode;
    }

    public String getPayment() {
        return payment;
    }

    public void setPayment(String payment) {
        this.payment = payment;
    }

    public String getCuisines() {
        return cuisines;
    }

    public void setCuisines(String cuisines) {
        this.cuisines = cuisines;
    }

    public Integer getPriceRangeFrom() {
        return priceRangeFrom;
    }

    public void setPriceRangeFrom(Integer priceRangeFrom) {
        this.priceRangeFrom = priceRangeFrom;
    }

    public String getExecutiveChef() {
        return executiveChef;
    }

    public void setExecutiveChef(String executiveChef) {
        this.executiveChef = executiveChef;
    }

    public String getSpecialEventsAndPromotions() {
        return specialEventsAndPromotions;
    }

    public void setSpecialEventsAndPromotions(String specialEventsAndPromotions) {
        this.specialEventsAndPromotions = specialEventsAndPromotions;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public Integer getPriceRangeTo() {
        return priceRangeTo;
    }

    public void setPriceRangeTo(Integer priceRangeTo) {
        this.priceRangeTo = priceRangeTo;
    }

    public Integer getAverage() {
        return average;
    }

    public void setAverage(Integer average) {
        this.average = average;
    }

    public String getParkingDetails() {
        return parkingDetails;
    }

    public void setParkingDetails(String parkingDetails) {
        this.parkingDetails = parkingDetails;
    }

    public String getAdditional() {
        return additional;
    }

    public void setAdditional(String additional) {
        this.additional = additional;
    }

    public String getPublicTransport() {
        return publicTransport;
    }

    public void setPublicTransport(String publicTransport) {
        this.publicTransport = publicTransport;
    }

    public String getMenus() {
        return menus;
    }

    public void setMenus(String menus) {
        this.menus = menus;
    }

    public String getZomato() {
        return zomato;
    }

    public void setZomato(String zomato) {
        this.zomato = zomato;
    }

    public String getOpenTable() {
        return openTable;
    }

    public void setOpenTable(String openTable) {
        this.openTable = openTable;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        String __key = this.placeId;
        if (place__resolvedKey == null || place__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
            	place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        synchronized (this) {
            this.place = place;
            placeId = place == null ? null : place.getObjectId();
            place__resolvedKey = placeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Menu> getMenuList() {
        if (menuList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuDao targetDao = daoSession.getMenuDao();
            List<Menu> menuListNew = targetDao._queryRestaurant_MenuList(objectId);
            synchronized (this) {
                if(menuList == null) {
                    menuList = menuListNew;
                }
            }
        }
        return menuList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMenuList() {
        menuList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
