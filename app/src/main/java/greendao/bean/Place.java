package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.FoodDao;
import greendao.dao.GuideDao;
import greendao.dao.GuideGroupDao;
import greendao.dao.PlaceDao;
import greendao.dao.ProductDao;
import greendao.dao.RouteDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "PLACE".
 */
public class Place implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private String category;
    private String address;
    private String nameCn;
    private String telephone;
    private String email;
    private String subcategory;
    private String name;
    private String city;
    private String fax;
    private String types;
    private Double longitude;
    private String state;
    private Double rating;
    private Integer weight;
    private String postcode;
    private String hoursOfOperation;
    private String photos;
    private String coverImage;
    private String howToGetThere;
    private String area;
    private String website;
    private Double latitude;
    private Boolean feature;
    private String country;
    private String rowStatus;
    private String attraction;
    private String restaurant;
    private String hotel;
    private String extraInfo;
    private String neighborhood;
    private String mall;
    private String urls;
    private String placeUrl;
    private String station;
    private String createdAt;
    private String updatedAt;
    private String neighborhoodId;
    private String foodId;
    private String productId;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlaceDao myDao;

    private Place place;
    private String place__resolvedKey;

    private Food food;
    private String food__resolvedKey;

    private Product product;
    private String product__resolvedKey;

    private Guide guide;
    private String guide__resolvedKey;

    private List<Route> placeList;
    private List<Place> neighborhoodList;
    private List<GuideGroup> guideGroupList;
    private List<Document> placePhotoList;

    public Place() {
    }

    public Place(String objectId) {
        this.objectId = objectId;
    }

    public Place(String objectId, String category, String address, String nameCn, String telephone, String email, String subcategory, String name, String city, String fax, String types, Double longitude, String state, Double rating, Integer weight, String postcode, String hoursOfOperation, String photos, String coverImage, String howToGetThere, String area, String website, Double latitude, Boolean feature, String country, String rowStatus, String attraction, String restaurant, String hotel, String extraInfo, String neighborhood, String mall, String urls, String placeUrl, String station, String createdAt, String updatedAt, String neighborhoodId, String foodId, String productId, String guideId) {
        this.objectId = objectId;
        this.category = category;
        this.address = address;
        this.nameCn = nameCn;
        this.telephone = telephone;
        this.email = email;
        this.subcategory = subcategory;
        this.name = name;
        this.city = city;
        this.fax = fax;
        this.types = types;
        this.longitude = longitude;
        this.state = state;
        this.rating = rating;
        this.weight = weight;
        this.postcode = postcode;
        this.hoursOfOperation = hoursOfOperation;
        this.photos = photos;
        this.coverImage = coverImage;
        this.howToGetThere = howToGetThere;
        this.area = area;
        this.website = website;
        this.latitude = latitude;
        this.feature = feature;
        this.country = country;
        this.rowStatus = rowStatus;
        this.attraction = attraction;
        this.restaurant = restaurant;
        this.hotel = hotel;
        this.extraInfo = extraInfo;
        this.neighborhood = neighborhood;
        this.mall = mall;
        this.urls = urls;
        this.placeUrl = placeUrl;
        this.station = station;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.neighborhoodId = neighborhoodId;
        this.foodId = foodId;
        this.productId = productId;
        this.guideId = guideId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlaceDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getNameCn() {
        return nameCn;
    }

    public void setNameCn(String nameCn) {
        this.nameCn = nameCn;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getSubcategory() {
        return subcategory;
    }

    public void setSubcategory(String subcategory) {
        this.subcategory = subcategory;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getFax() {
        return fax;
    }

    public void setFax(String fax) {
        this.fax = fax;
    }

    public String getTypes() {
        return types;
    }

    public void setTypes(String types) {
        this.types = types;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Double getRating() {
        return rating;
    }

    public void setRating(Double rating) {
        this.rating = rating;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public String getPostcode() {
        return postcode;
    }

    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    public String getHoursOfOperation() {
        return hoursOfOperation;
    }

    public void setHoursOfOperation(String hoursOfOperation) {
        this.hoursOfOperation = hoursOfOperation;
    }

    public String getPhotos() {
        return photos;
    }

    public void setPhotos(String photos) {
        this.photos = photos;
    }

    public String getCoverImage() {
        return coverImage;
    }

    public void setCoverImage(String coverImage) {
        this.coverImage = coverImage;
    }

    public String getHowToGetThere() {
        return howToGetThere;
    }

    public void setHowToGetThere(String howToGetThere) {
        this.howToGetThere = howToGetThere;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Boolean getFeature() {
        return feature;
    }

    public void setFeature(Boolean feature) {
        this.feature = feature;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getAttraction() {
        return attraction;
    }

    public void setAttraction(String attraction) {
        this.attraction = attraction;
    }

    public String getRestaurant() {
        return restaurant;
    }

    public void setRestaurant(String restaurant) {
        this.restaurant = restaurant;
    }

    public String getHotel() {
        return hotel;
    }

    public void setHotel(String hotel) {
        this.hotel = hotel;
    }

    public String getExtraInfo() {
        return extraInfo;
    }

    public void setExtraInfo(String extraInfo) {
        this.extraInfo = extraInfo;
    }

    public String getNeighborhood() {
        return neighborhood;
    }

    public void setNeighborhood(String neighborhood) {
        this.neighborhood = neighborhood;
    }

    public String getMall() {
        return mall;
    }

    public void setMall(String mall) {
        this.mall = mall;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    public String getPlaceUrl() {
        return placeUrl;
    }

    public void setPlaceUrl(String placeUrl) {
        this.placeUrl = placeUrl;
    }

    public String getStation() {
        return station;
    }

    public void setStation(String station) {
        this.station = station;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getNeighborhoodId() {
        return neighborhoodId;
    }

    public void setNeighborhoodId(String neighborhoodId) {
        this.neighborhoodId = neighborhoodId;
    }

    public String getFoodId() {
        return foodId;
    }

    public void setFoodId(String foodId) {
        this.foodId = foodId;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        String __key = this.neighborhoodId;
        if (place__resolvedKey == null || place__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
                place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        synchronized (this) {
            this.place = place;
            neighborhoodId = place == null ? null : place.getObjectId();
            place__resolvedKey = neighborhoodId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Food getFood() {
        String __key = this.foodId;
        if (food__resolvedKey == null || food__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FoodDao targetDao = daoSession.getFoodDao();
            Food foodNew = targetDao.load(__key);
            synchronized (this) {
                food = foodNew;
                food__resolvedKey = __key;
            }
        }
        return food;
    }

    public void setFood(Food food) {
        synchronized (this) {
            this.food = food;
            foodId = food == null ? null : food.getObjectId();
            food__resolvedKey = foodId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.productId;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
                product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            productId = product == null ? null : product.getObjectId();
            product__resolvedKey = productId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
                guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Route> getPlaceList() {
        if (placeList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteDao targetDao = daoSession.getRouteDao();
            List<Route> placeListNew = targetDao._queryPlace_PlaceList(objectId);
            synchronized (this) {
                if(placeList == null) {
                    placeList = placeListNew;
                }
            }
        }
        return placeList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlaceList() {
        placeList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Place> getNeighborhoodList() {
        if (neighborhoodList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            List<Place> neighborhoodListNew = targetDao._queryPlace_NeighborhoodList(objectId);
            synchronized (this) {
                if(neighborhoodList == null) {
                    neighborhoodList = neighborhoodListNew;
                }
            }
        }
        return neighborhoodList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNeighborhoodList() {
        neighborhoodList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GuideGroup> getGuideGroupList() {
        if (guideGroupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideGroupDao targetDao = daoSession.getGuideGroupDao();
            List<GuideGroup> guideGroupListNew = targetDao._queryPlace_GuideGroupList(objectId);
            synchronized (this) {
                if(guideGroupList == null) {
                    guideGroupList = guideGroupListNew;
                }
            }
        }
        return guideGroupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGuideGroupList() {
        guideGroupList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getPlacePhotoList() {
        if (placePhotoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> placePhotoListNew = targetDao._queryPlace_PlacePhotoList(objectId);
            synchronized (this) {
                if(placePhotoList == null) {
                    placePhotoList = placePhotoListNew;
                }
            }
        }
        return placePhotoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlacePhotoList() {
        placePhotoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }


    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(this.objectId);
        dest.writeString(this.category);
        dest.writeString(this.address);
        dest.writeString(this.nameCn);
        dest.writeString(this.telephone);
        dest.writeString(this.email);
        dest.writeString(this.subcategory);
        dest.writeString(this.name);
        dest.writeString(this.city);
        dest.writeString(this.fax);
        dest.writeString(this.types);
        dest.writeValue(this.longitude);
        dest.writeString(this.state);
        dest.writeValue(this.rating);
        dest.writeValue(this.weight);
        dest.writeString(this.postcode);
        dest.writeString(this.hoursOfOperation);
        dest.writeString(this.photos);
        dest.writeString(this.coverImage);
        dest.writeString(this.howToGetThere);
        dest.writeString(this.area);
        dest.writeString(this.website);
        dest.writeValue(this.latitude);
        dest.writeValue(this.feature);
        dest.writeString(this.country);
        dest.writeString(this.rowStatus);
        dest.writeString(this.attraction);
        dest.writeString(this.restaurant);
        dest.writeString(this.hotel);
        dest.writeString(this.extraInfo);
        dest.writeString(this.neighborhood);
        dest.writeString(this.mall);
        dest.writeString(this.urls);
        dest.writeString(this.placeUrl);
        dest.writeString(this.station);
        dest.writeString(this.createdAt);
        dest.writeString(this.updatedAt);
        dest.writeString(this.neighborhoodId);
        dest.writeString(this.foodId);
        dest.writeString(this.productId);
        dest.writeString(this.guideId);
        dest.writeParcelable(this.place, flags);
        dest.writeString(this.place__resolvedKey);
        dest.writeParcelable(this.food, flags);
        dest.writeString(this.food__resolvedKey);
        dest.writeParcelable(this.product, flags);
        dest.writeString(this.product__resolvedKey);
        dest.writeParcelable(this.guide, flags);
        dest.writeString(this.guide__resolvedKey);
        dest.writeList(this.placeList);
        dest.writeList(this.neighborhoodList);
        dest.writeList(this.guideGroupList);
        dest.writeList(this.placePhotoList);
    }

    protected Place(Parcel in) {
        this.objectId = in.readString();
        this.category = in.readString();
        this.address = in.readString();
        this.nameCn = in.readString();
        this.telephone = in.readString();
        this.email = in.readString();
        this.subcategory = in.readString();
        this.name = in.readString();
        this.city = in.readString();
        this.fax = in.readString();
        this.types = in.readString();
        this.longitude = (Double) in.readValue(Double.class.getClassLoader());
        this.state = in.readString();
        this.rating = (Double) in.readValue(Double.class.getClassLoader());
        this.weight = (Integer) in.readValue(Integer.class.getClassLoader());
        this.postcode = in.readString();
        this.hoursOfOperation = in.readString();
        this.photos = in.readString();
        this.coverImage = in.readString();
        this.howToGetThere = in.readString();
        this.area = in.readString();
        this.website = in.readString();
        this.latitude = (Double) in.readValue(Double.class.getClassLoader());
        this.feature = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.country = in.readString();
        this.rowStatus = in.readString();
        this.attraction = in.readString();
        this.restaurant = in.readString();
        this.hotel = in.readString();
        this.extraInfo = in.readString();
        this.neighborhood = in.readString();
        this.mall = in.readString();
        this.urls = in.readString();
        this.placeUrl = in.readString();
        this.station = in.readString();
        this.createdAt = in.readString();
        this.updatedAt = in.readString();
        this.neighborhoodId = in.readString();
        this.foodId = in.readString();
        this.productId = in.readString();
        this.guideId = in.readString();
        this.place = in.readParcelable(Place.class.getClassLoader());
        this.place__resolvedKey = in.readString();
        this.food = in.readParcelable(Food.class.getClassLoader());
        this.food__resolvedKey = in.readString();
        this.product = in.readParcelable(Product.class.getClassLoader());
        this.product__resolvedKey = in.readString();
        this.guide = in.readParcelable(Guide.class.getClassLoader());
        this.guide__resolvedKey = in.readString();
        this.placeList = new ArrayList<Route>();
        in.readList(this.placeList, Route.class.getClassLoader());
        this.neighborhoodList = new ArrayList<Place>();
        in.readList(this.neighborhoodList, Place.class.getClassLoader());
        this.guideGroupList = new ArrayList<GuideGroup>();
        in.readList(this.guideGroupList, GuideGroup.class.getClassLoader());
        this.placePhotoList = new ArrayList<Document>();
        in.readList(this.placePhotoList, Document.class.getClassLoader());
    }

    public static final Creator<Place> CREATOR = new Creator<Place>() {
        @Override
        public Place createFromParcel(Parcel source) {
            return new Place(source);
        }

        @Override
        public Place[] newArray(int size) {
            return new Place[size];
        }
    };

}
