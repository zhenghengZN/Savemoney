package greendao.bean;

import de.greenrobot.dao.DaoException;
import greendao.dao.ActivityDao;
import greendao.dao.AppDao;
import greendao.dao.ArticleDao;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.FoodDao;
import greendao.dao.GuideDao;
import greendao.dao.PlaceDao;
import greendao.dao.ProductDao;
import greendao.dao.RouteDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "DOCUMENT".
 */
public class Document {

    /** Not-null value. */
    private String objectId;
    private String caption;
    private String originalName;
    private String file;
    private String rowStatus;
    private String url;
    private String contentType;
    private String metadata;
    private String placeCoverImageId;
    private String iconId;
    private String createdAt;
    private String updatedAt;
    private String appId;
    private String guideId;
    private String articleId;
    private String foodId;
    private String placePhotosId;
    private String productId;
    private String routeId;
    private String activityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DocumentDao myDao;

    private App app;
    private String app__resolvedKey;

    private Guide guide;
    private String guide__resolvedKey;

    private Article article;
    private String article__resolvedKey;

    private Food food;
    private String food__resolvedKey;

    private Place place;
    private String place__resolvedKey;

    private Product product;
    private String product__resolvedKey;

    private Route route;
    private String route__resolvedKey;

    private Activity activity;
    private String activity__resolvedKey;


    public Document() {
    }

    public Document(String objectId) {
        this.objectId = objectId;
    }

    public Document(String objectId, String caption, String originalName, String file, String rowStatus, String url, String contentType, String metadata, String placeCoverImageId, String iconId, String createdAt, String updatedAt, String appId, String guideId, String articleId, String foodId, String placePhotosId, String productId, String routeId, String activityId) {
        this.objectId = objectId;
        this.caption = caption;
        this.originalName = originalName;
        this.file = file;
        this.rowStatus = rowStatus;
        this.url = url;
        this.contentType = contentType;
        this.metadata = metadata;
        this.placeCoverImageId = placeCoverImageId;
        this.iconId = iconId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.appId = appId;
        this.guideId = guideId;
        this.articleId = articleId;
        this.foodId = foodId;
        this.placePhotosId = placePhotosId;
        this.productId = productId;
        this.routeId = routeId;
        this.activityId = activityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDocumentDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getCaption() {
        return caption;
    }

    public void setCaption(String caption) {
        this.caption = caption;
    }

    public String getOriginalName() {
        return originalName;
    }

    public void setOriginalName(String originalName) {
        this.originalName = originalName;
    }

    public String getFile() {
        return file;
    }

    public void setFile(String file) {
        this.file = file;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public String getMetadata() {
        return metadata;
    }

    public void setMetadata(String metadata) {
        this.metadata = metadata;
    }

    public String getPlaceCoverImageId() {
        return placeCoverImageId;
    }

    public void setPlaceCoverImageId(String placeCoverImageId) {
        this.placeCoverImageId = placeCoverImageId;
    }

    public String getIconId() {
        return iconId;
    }

    public void setIconId(String iconId) {
        this.iconId = iconId;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getAppId() {
        return appId;
    }

    public void setAppId(String appId) {
        this.appId = appId;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    public String getArticleId() {
        return articleId;
    }

    public void setArticleId(String articleId) {
        this.articleId = articleId;
    }

    public String getFoodId() {
        return foodId;
    }

    public void setFoodId(String foodId) {
        this.foodId = foodId;
    }

    public String getPlacePhotosId() {
        return placePhotosId;
    }

    public void setPlacePhotosId(String placePhotosId) {
        this.placePhotosId = placePhotosId;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public String getRouteId() {
        return routeId;
    }

    public void setRouteId(String routeId) {
        this.routeId = routeId;
    }

    public String getActivityId() {
        return activityId;
    }

    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    /** To-one relationship, resolved on first access. */
    public App getApp() {
        String __key = this.appId;
        if (app__resolvedKey == null || app__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AppDao targetDao = daoSession.getAppDao();
            App appNew = targetDao.load(__key);
            synchronized (this) {
                app = appNew;
            	app__resolvedKey = __key;
            }
        }
        return app;
    }

    public void setApp(App app) {
        synchronized (this) {
            this.app = app;
            appId = app == null ? null : app.getObjectId();
            app__resolvedKey = appId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
            	guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Article getArticle() {
        String __key = this.articleId;
        if (article__resolvedKey == null || article__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleDao targetDao = daoSession.getArticleDao();
            Article articleNew = targetDao.load(__key);
            synchronized (this) {
                article = articleNew;
            	article__resolvedKey = __key;
            }
        }
        return article;
    }

    public void setArticle(Article article) {
        synchronized (this) {
            this.article = article;
            articleId = article == null ? null : article.getObjectId();
            article__resolvedKey = articleId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Food getFood() {
        String __key = this.foodId;
        if (food__resolvedKey == null || food__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FoodDao targetDao = daoSession.getFoodDao();
            Food foodNew = targetDao.load(__key);
            synchronized (this) {
                food = foodNew;
            	food__resolvedKey = __key;
            }
        }
        return food;
    }

    public void setFood(Food food) {
        synchronized (this) {
            this.food = food;
            foodId = food == null ? null : food.getObjectId();
            food__resolvedKey = foodId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        String __key = this.placePhotosId;
        if (place__resolvedKey == null || place__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
            	place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        synchronized (this) {
            this.place = place;
            placePhotosId = place == null ? null : place.getObjectId();
            place__resolvedKey = placePhotosId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.productId;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            productId = product == null ? null : product.getObjectId();
            product__resolvedKey = productId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Route getRoute() {
        String __key = this.routeId;
        if (route__resolvedKey == null || route__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteDao targetDao = daoSession.getRouteDao();
            Route routeNew = targetDao.load(__key);
            synchronized (this) {
                route = routeNew;
            	route__resolvedKey = __key;
            }
        }
        return route;
    }

    public void setRoute(Route route) {
        synchronized (this) {
            this.route = route;
            routeId = route == null ? null : route.getObjectId();
            route__resolvedKey = routeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Activity getActivity() {
        String __key = this.activityId;
        if (activity__resolvedKey == null || activity__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActivityDao targetDao = daoSession.getActivityDao();
            Activity activityNew = targetDao.load(__key);
            synchronized (this) {
                activity = activityNew;
            	activity__resolvedKey = __key;
            }
        }
        return activity;
    }

    public void setActivity(Activity activity) {
        synchronized (this) {
            this.activity = activity;
            activityId = activity == null ? null : activity.getObjectId();
            activity__resolvedKey = activityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
