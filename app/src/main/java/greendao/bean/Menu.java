package greendao.bean;

import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.DaoSession;
import greendao.dao.MenuDao;
import greendao.dao.MenuSectionDao;
import greendao.dao.RestaurantDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "MENU".
 */
public class Menu {

    /** Not-null value. */
    private String objectId;
    private String desc;
    private String nameCn;
    private String name;
    private String descCn;
    private String rowStatus;
    private String sections;
    private String createdAt;
    private String updatedAt;
    private String restaurantId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MenuDao myDao;

    private Restaurant restaurant;
    private String restaurant__resolvedKey;

    private List<MenuSection> menuSectionList;

    public Menu() {
    }

    public Menu(String objectId) {
        this.objectId = objectId;
    }

    public Menu(String objectId, String desc, String nameCn, String name, String descCn, String rowStatus, String sections, String createdAt, String updatedAt, String restaurantId) {
        this.objectId = objectId;
        this.desc = desc;
        this.nameCn = nameCn;
        this.name = name;
        this.descCn = descCn;
        this.rowStatus = rowStatus;
        this.sections = sections;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.restaurantId = restaurantId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMenuDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getNameCn() {
        return nameCn;
    }

    public void setNameCn(String nameCn) {
        this.nameCn = nameCn;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescCn() {
        return descCn;
    }

    public void setDescCn(String descCn) {
        this.descCn = descCn;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getSections() {
        return sections;
    }

    public void setSections(String sections) {
        this.sections = sections;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getRestaurantId() {
        return restaurantId;
    }

    public void setRestaurantId(String restaurantId) {
        this.restaurantId = restaurantId;
    }

    /** To-one relationship, resolved on first access. */
    public Restaurant getRestaurant() {
        String __key = this.restaurantId;
        if (restaurant__resolvedKey == null || restaurant__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RestaurantDao targetDao = daoSession.getRestaurantDao();
            Restaurant restaurantNew = targetDao.load(__key);
            synchronized (this) {
                restaurant = restaurantNew;
            	restaurant__resolvedKey = __key;
            }
        }
        return restaurant;
    }

    public void setRestaurant(Restaurant restaurant) {
        synchronized (this) {
            this.restaurant = restaurant;
            restaurantId = restaurant == null ? null : restaurant.getObjectId();
            restaurant__resolvedKey = restaurantId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MenuSection> getMenuSectionList() {
        if (menuSectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuSectionDao targetDao = daoSession.getMenuSectionDao();
            List<MenuSection> menuSectionListNew = targetDao._queryMenu_MenuSectionList(objectId);
            synchronized (this) {
                if(menuSectionList == null) {
                    menuSectionList = menuSectionListNew;
                }
            }
        }
        return menuSectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMenuSectionList() {
        menuSectionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
