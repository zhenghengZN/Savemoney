package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import de.greenrobot.dao.DaoException;
import greendao.dao.ContactDao;
import greendao.dao.DaoSession;
import greendao.dao.GuideDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "CONTACT".
 */
public class Contact implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private String address;
    private String fax;
    private String email;
    private String desc;
    private Integer index;
    private String telephone;
    private String title;
    private String website;
    private String rowStatus;
    private String createdAt;
    private String updatedAt;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDao myDao;

    private Guide guide;
    private String guide__resolvedKey;


    public Contact() {
    }

    public Contact(String objectId) {
        this.objectId = objectId;
    }

    public Contact(String objectId, String address, String fax, String email, String desc, Integer index, String telephone, String title, String website, String rowStatus, String createdAt, String updatedAt, String guideId) {
        this.objectId = objectId;
        this.address = address;
        this.fax = fax;
        this.email = email;
        this.desc = desc;
        this.index = index;
        this.telephone = telephone;
        this.title = title;
        this.website = website;
        this.rowStatus = rowStatus;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.guideId = guideId;
    }

    protected Contact(Parcel in) {
        objectId = in.readString();
        address = in.readString();
        fax = in.readString();
        email = in.readString();
        desc = in.readString();
        telephone = in.readString();
        title = in.readString();
        website = in.readString();
        rowStatus = in.readString();
        createdAt = in.readString();
        updatedAt = in.readString();
        guideId = in.readString();
        guide = in.readParcelable(Guide.class.getClassLoader());
        guide__resolvedKey = in.readString();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(objectId);
        dest.writeString(address);
        dest.writeString(fax);
        dest.writeString(email);
        dest.writeString(desc);
        dest.writeString(telephone);
        dest.writeString(title);
        dest.writeString(website);
        dest.writeString(rowStatus);
        dest.writeString(createdAt);
        dest.writeString(updatedAt);
        dest.writeString(guideId);
        dest.writeParcelable(guide, flags);
        dest.writeString(guide__resolvedKey);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<Contact> CREATOR = new Creator<Contact>() {
        @Override
        public Contact createFromParcel(Parcel in) {
            return new Contact(in);
        }

        @Override
        public Contact[] newArray(int size) {
            return new Contact[size];
        }
    };

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getFax() {
        return fax;
    }

    public void setFax(String fax) {
        this.fax = fax;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
            	guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
