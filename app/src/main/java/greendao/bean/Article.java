package greendao.bean;

import java.io.Serializable;
import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.ArticleDao;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.GuideDao;
import greendao.dao.VisaDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ARTICLE".
 */
public class Article implements Serializable{

    /** Not-null value. */
    private String objectId;
    private Integer index;
    private Integer comments;
    private Integer likes;
    private String title;
    private String rowStatus;
    private String notes;
    private String desc;
    private Integer allDay;
    private Integer day;
    private String links;
    private String photos;
    private String checkListItems;
    private String place;
    private String bestTime;
    private String category;
    private String urls;
    private String tips;
    private String itineraryId;
    private String createdAt;
    private String updatedAt;
    private String visaId;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ArticleDao myDao;

    private Visa visa;
    private String visa__resolvedKey;

    private Guide guide;
    private String guide__resolvedKey;

    private List<Document> articlePhotoList;

    public Article() {
    }

    public Article(String objectId) {
        this.objectId = objectId;
    }

    public Article(String objectId, Integer index, Integer comments, Integer likes, String title, String rowStatus, String notes, String desc, Integer allDay, Integer day, String links, String photos, String checkListItems, String place, String bestTime, String category, String urls, String tips, String itineraryId, String createdAt, String updatedAt, String visaId, String guideId) {
        this.objectId = objectId;
        this.index = index;
        this.comments = comments;
        this.likes = likes;
        this.title = title;
        this.rowStatus = rowStatus;
        this.notes = notes;
        this.desc = desc;
        this.allDay = allDay;
        this.day = day;
        this.links = links;
        this.photos = photos;
        this.checkListItems = checkListItems;
        this.place = place;
        this.bestTime = bestTime;
        this.category = category;
        this.urls = urls;
        this.tips = tips;
        this.itineraryId = itineraryId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.visaId = visaId;
        this.guideId = guideId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getAllDay() {
        return allDay;
    }

    public void setAllDay(Integer allDay) {
        this.allDay = allDay;
    }

    public Integer getDay() {
        return day;
    }

    public void setDay(Integer day) {
        this.day = day;
    }

    public String getLinks() {
        return links;
    }

    public void setLinks(String links) {
        this.links = links;
    }

    public String getPhotos() {
        return photos;
    }

    public void setPhotos(String photos) {
        this.photos = photos;
    }

    public String getCheckListItems() {
        return checkListItems;
    }

    public void setCheckListItems(String checkListItems) {
        this.checkListItems = checkListItems;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public String getBestTime() {
        return bestTime;
    }

    public void setBestTime(String bestTime) {
        this.bestTime = bestTime;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    public String getTips() {
        return tips;
    }

    public void setTips(String tips) {
        this.tips = tips;
    }

    public String getItineraryId() {
        return itineraryId;
    }

    public void setItineraryId(String itineraryId) {
        this.itineraryId = itineraryId;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getVisaId() {
        return visaId;
    }

    public void setVisaId(String visaId) {
        this.visaId = visaId;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Visa getVisa() {
        String __key = this.visaId;
        if (visa__resolvedKey == null || visa__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VisaDao targetDao = daoSession.getVisaDao();
            Visa visaNew = targetDao.load(__key);
            synchronized (this) {
                visa = visaNew;
                visa__resolvedKey = __key;
            }
        }
        return visa;
    }

    public void setVisa(Visa visa) {
        synchronized (this) {
            this.visa = visa;
            visaId = visa == null ? null : visa.getObjectId();
            visa__resolvedKey = visaId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
                guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getArticlePhotoList() {
        if (articlePhotoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> articlePhotoListNew = targetDao._queryArticle_ArticlePhotoList(objectId);
            synchronized (this) {
                if(articlePhotoList == null) {
                    articlePhotoList = articlePhotoListNew;
                }
            }
        }
        return articlePhotoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetArticlePhotoList() {
        articlePhotoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
