package greendao.bean;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.AirlineDao;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.GuideDao;
import greendao.dao.PlaceDao;
import greendao.dao.RouteDao;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "ROUTE".
 */
public class Route implements Parcelable {

    /** Not-null value. */
    private String objectId;
    private String desc;
    private Integer index = 0;
    private Integer comments;
    private Integer likes;
    private String departure;
    private String arrival;
    private String type;
    private String rowStatus;
    private String airlines;
    private String photos;
    private String urls;
    private String places;
    private String createdAt;
    private String updatedAt;
    private String guideId;
    private String placeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RouteDao myDao;

    private Guide guide;
    private String guide__resolvedKey;

    private Place place;
    private String place__resolvedKey;

    private List<Document> routePhotoList;
    private List<Airline> airlineList;

    public Route() {
    }

    public Route(String objectId) {
        this.objectId = objectId;
    }

    public Route(String objectId, String desc, Integer index, Integer comments, Integer likes, String departure, String arrival, String type, String rowStatus, String airlines, String photos, String urls, String places, String createdAt, String updatedAt, String guideId, String placeId) {
        this.objectId = objectId;
        this.desc = desc;
        this.index = index;
        this.comments = comments;
        this.likes = likes;
        this.departure = departure;
        this.arrival = arrival;
        this.type = type;
        this.rowStatus = rowStatus;
        this.airlines = airlines;
        this.photos = photos;
        this.urls = urls;
        this.places = places;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.guideId = guideId;
        this.placeId = placeId;
    }

    protected Route(Parcel in) {
        objectId = in.readString();
        desc = in.readString();
        departure = in.readString();
        arrival = in.readString();
        type = in.readString();
        rowStatus = in.readString();
        airlines = in.readString();
        photos = in.readString();
        urls = in.readString();
        places = in.readString();
        createdAt = in.readString();
        updatedAt = in.readString();
        guideId = in.readString();
        placeId = in.readString();
        guide = in.readParcelable(Guide.class.getClassLoader());
        guide__resolvedKey = in.readString();
        place = in.readParcelable(Place.class.getClassLoader());
        place__resolvedKey = in.readString();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(objectId);
        dest.writeString(desc);
        dest.writeString(departure);
        dest.writeString(arrival);
        dest.writeString(type);
        dest.writeString(rowStatus);
        dest.writeString(airlines);
        dest.writeString(photos);
        dest.writeString(urls);
        dest.writeString(places);
        dest.writeString(createdAt);
        dest.writeString(updatedAt);
        dest.writeString(guideId);
        dest.writeString(placeId);
        dest.writeParcelable(guide, flags);
        dest.writeString(guide__resolvedKey);
        dest.writeParcelable(place, flags);
        dest.writeString(place__resolvedKey);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<Route> CREATOR = new Creator<Route>() {
        @Override
        public Route createFromParcel(Parcel in) {
            return new Route(in);
        }

        @Override
        public Route[] newArray(int size) {
            return new Route[size];
        }
    };

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRouteDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public String getDeparture() {
        return departure;
    }

    public void setDeparture(String departure) {
        this.departure = departure;
    }

    public String getArrival() {
        return arrival;
    }

    public void setArrival(String arrival) {
        this.arrival = arrival;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public String getAirlines() {
        return airlines;
    }

    public void setAirlines(String airlines) {
        this.airlines = airlines;
    }

    public String getPhotos() {
        return photos;
    }

    public void setPhotos(String photos) {
        this.photos = photos;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    public String getPlaces() {
        return places;
    }

    public void setPlaces(String places) {
        this.places = places;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
            	guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Place getPlace() {
        String __key = this.placeId;
        if (place__resolvedKey == null || place__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlaceDao targetDao = daoSession.getPlaceDao();
            Place placeNew = targetDao.load(__key);
            synchronized (this) {
                place = placeNew;
            	place__resolvedKey = __key;
            }
        }
        return place;
    }

    public void setPlace(Place place) {
        synchronized (this) {
            this.place = place;
            placeId = place == null ? null : place.getObjectId();
            place__resolvedKey = placeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getRoutePhotoList() {
        if (routePhotoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> routePhotoListNew = targetDao._queryRoute_RoutePhotoList(objectId);
            synchronized (this) {
                if(routePhotoList == null) {
                    routePhotoList = routePhotoListNew;
                }
            }
        }
        return routePhotoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRoutePhotoList() {
        routePhotoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Airline> getAirlineList() {
        if (airlineList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AirlineDao targetDao = daoSession.getAirlineDao();
            List<Airline> airlineListNew = targetDao._queryRoute_AirlineList(objectId);
            synchronized (this) {
                if(airlineList == null) {
                    airlineList = airlineListNew;
                }
            }
        }
        return airlineList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAirlineList() {
        airlineList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
