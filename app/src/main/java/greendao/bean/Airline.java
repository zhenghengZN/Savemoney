package greendao.bean;

import de.greenrobot.dao.DaoException;
import greendao.dao.AirlineDao;
import greendao.dao.DaoSession;
import greendao.dao.RouteDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "AIRLINE".
 */
public class Airline {

    /** Not-null value. */
    private String objectId;
    private String nameCn;
    private String iataCode;
    private String createdAt;
    private String updatedAt;
    private String icaoCode;
    private String name;
    private String country;
    private Integer openFlightId;
    private String callSign;
    private String countryCn;
    private String routeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AirlineDao myDao;

    private Route route;
    private String route__resolvedKey;


    public Airline() {
    }

    public Airline(String objectId) {
        this.objectId = objectId;
    }

    public Airline(String objectId, String nameCn, String iataCode, String createdAt, String updatedAt, String icaoCode, String name, String country, Integer openFlightId, String callSign, String countryCn, String routeId) {
        this.objectId = objectId;
        this.nameCn = nameCn;
        this.iataCode = iataCode;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.icaoCode = icaoCode;
        this.name = name;
        this.country = country;
        this.openFlightId = openFlightId;
        this.callSign = callSign;
        this.countryCn = countryCn;
        this.routeId = routeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAirlineDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getNameCn() {
        return nameCn;
    }

    public void setNameCn(String nameCn) {
        this.nameCn = nameCn;
    }

    public String getIataCode() {
        return iataCode;
    }

    public void setIataCode(String iataCode) {
        this.iataCode = iataCode;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getIcaoCode() {
        return icaoCode;
    }

    public void setIcaoCode(String icaoCode) {
        this.icaoCode = icaoCode;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public Integer getOpenFlightId() {
        return openFlightId;
    }

    public void setOpenFlightId(Integer openFlightId) {
        this.openFlightId = openFlightId;
    }

    public String getCallSign() {
        return callSign;
    }

    public void setCallSign(String callSign) {
        this.callSign = callSign;
    }

    public String getCountryCn() {
        return countryCn;
    }

    public void setCountryCn(String countryCn) {
        this.countryCn = countryCn;
    }

    public String getRouteId() {
        return routeId;
    }

    public void setRouteId(String routeId) {
        this.routeId = routeId;
    }

    /** To-one relationship, resolved on first access. */
    public Route getRoute() {
        String __key = this.routeId;
        if (route__resolvedKey == null || route__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteDao targetDao = daoSession.getRouteDao();
            Route routeNew = targetDao.load(__key);
            synchronized (this) {
                route = routeNew;
            	route__resolvedKey = __key;
            }
        }
        return route;
    }

    public void setRoute(Route route) {
        synchronized (this) {
            this.route = route;
            routeId = route == null ? null : route.getObjectId();
            route__resolvedKey = routeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
