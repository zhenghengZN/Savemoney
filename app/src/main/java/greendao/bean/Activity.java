package greendao.bean;

import java.util.List;

import de.greenrobot.dao.DaoException;
import greendao.dao.ActivityDao;
import greendao.dao.DaoSession;
import greendao.dao.DocumentDao;
import greendao.dao.GuideDao;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "ACTIVITY".
 */
public class Activity {

    /** Not-null value. */
    private String objectId;
    private String city;
    private Double rating;
    private String subcategory;
    private String place;
    private Integer weight;
    private String title;
    private String highlights;
    private String notes;
    private Integer comments;
    private String photos;
    private String rowStatus;
    private Integer likes;
    private String updatedAt;
    private String desc;
    private String urls;
    private String createdAt;
    private String bestTime;
    private String guideId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActivityDao myDao;

    private Guide guide;
    private String guide__resolvedKey;

    private List<Document> activityPhotoList;

    public Activity() {
    }

    public Activity(String objectId) {
        this.objectId = objectId;
    }

    public Activity(String objectId, String city, Double rating, String subcategory, String place, Integer weight, String title, String highlights, String notes, Integer comments, String photos, String rowStatus, Integer likes, String updatedAt, String desc, String urls, String createdAt, String bestTime, String guideId) {
        this.objectId = objectId;
        this.city = city;
        this.rating = rating;
        this.subcategory = subcategory;
        this.place = place;
        this.weight = weight;
        this.title = title;
        this.highlights = highlights;
        this.notes = notes;
        this.comments = comments;
        this.photos = photos;
        this.rowStatus = rowStatus;
        this.likes = likes;
        this.updatedAt = updatedAt;
        this.desc = desc;
        this.urls = urls;
        this.createdAt = createdAt;
        this.bestTime = bestTime;
        this.guideId = guideId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActivityDao() : null;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Double getRating() {
        return rating;
    }

    public void setRating(Double rating) {
        this.rating = rating;
    }

    public String getSubcategory() {
        return subcategory;
    }

    public void setSubcategory(String subcategory) {
        this.subcategory = subcategory;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getHighlights() {
        return highlights;
    }

    public void setHighlights(String highlights) {
        this.highlights = highlights;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public String getPhotos() {
        return photos;
    }

    public void setPhotos(String photos) {
        this.photos = photos;
    }

    public String getRowStatus() {
        return rowStatus;
    }

    public void setRowStatus(String rowStatus) {
        this.rowStatus = rowStatus;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public String getBestTime() {
        return bestTime;
    }

    public void setBestTime(String bestTime) {
        this.bestTime = bestTime;
    }

    public String getGuideId() {
        return guideId;
    }

    public void setGuideId(String guideId) {
        this.guideId = guideId;
    }

    /** To-one relationship, resolved on first access. */
    public Guide getGuide() {
        String __key = this.guideId;
        if (guide__resolvedKey == null || guide__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuideDao targetDao = daoSession.getGuideDao();
            Guide guideNew = targetDao.load(__key);
            synchronized (this) {
                guide = guideNew;
            	guide__resolvedKey = __key;
            }
        }
        return guide;
    }

    public void setGuide(Guide guide) {
        synchronized (this) {
            this.guide = guide;
            guideId = guide == null ? null : guide.getObjectId();
            guide__resolvedKey = guideId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Document> getActivityPhotoList() {
        if (activityPhotoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            List<Document> activityPhotoListNew = targetDao._queryActivity_ActivityPhotoList(objectId);
            synchronized (this) {
                if(activityPhotoList == null) {
                    activityPhotoList = activityPhotoListNew;
                }
            }
        }
        return activityPhotoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActivityPhotoList() {
        activityPhotoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
