package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.Guide;
import greendao.bean.GuideGroup;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GUIDE".
*/
public class GuideDao extends AbstractDao<Guide, String> {

    public static final String TABLENAME = "GUIDE";

    /**
     * Properties of entity Guide.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Weight = new Property(4, Integer.class, "weight", false, "WEIGHT");
        public final static Property RowStatus = new Property(5, String.class, "rowStatus", false, "ROW_STATUS");
        public final static Property IsFeature = new Property(6, Boolean.class, "isFeature", false, "IS_FEATURE");
        public final static Property Objects = new Property(7, String.class, "objects", false, "OBJECTS");
        public final static Property BackgroundImage = new Property(8, String.class, "backgroundImage", false, "BACKGROUND_IMAGE");
        public final static Property Location = new Property(9, String.class, "location", false, "LOCATION");
        public final static Property Icon = new Property(10, String.class, "icon", false, "ICON");
        public final static Property IconUrl = new Property(11, String.class, "iconUrl", false, "ICON_URL");
        public final static Property GuideUrl = new Property(12, String.class, "guideUrl", false, "GUIDE_URL");
        public final static Property CreatedAt = new Property(13, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property GuideGroupId = new Property(15, String.class, "guideGroupId", false, "GUIDE_GROUP_ID");
    };

    private DaoSession daoSession;

    private Query<Guide> guideGroup_GuideListQuery;

    public GuideDao(DaoConfig config) {
        super(config);
    }
    
    public GuideDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GUIDE\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"DESC\" TEXT," + // 1: desc
                "\"TYPE\" TEXT," + // 2: type
                "\"TITLE\" TEXT," + // 3: title
                "\"WEIGHT\" INTEGER," + // 4: weight
                "\"ROW_STATUS\" TEXT," + // 5: rowStatus
                "\"IS_FEATURE\" INTEGER," + // 6: isFeature
                "\"OBJECTS\" TEXT," + // 7: objects
                "\"BACKGROUND_IMAGE\" TEXT," + // 8: backgroundImage
                "\"LOCATION\" TEXT," + // 9: location
                "\"ICON\" TEXT," + // 10: icon
                "\"ICON_URL\" TEXT," + // 11: iconUrl
                "\"GUIDE_URL\" TEXT," + // 12: guideUrl
                "\"CREATED_AT\" TEXT," + // 13: createdAt
                "\"UPDATED_AT\" TEXT," + // 14: updatedAt
                "\"GUIDE_GROUP_ID\" TEXT);"); // 15: guideGroupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GUIDE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Guide entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(5, weight);
        }
 
        String rowStatus = entity.getRowStatus();
        if (rowStatus != null) {
            stmt.bindString(6, rowStatus);
        }
 
        Boolean isFeature = entity.getIsFeature();
        if (isFeature != null) {
            stmt.bindLong(7, isFeature ? 1L: 0L);
        }
 
        String objects = entity.getObjects();
        if (objects != null) {
            stmt.bindString(8, objects);
        }
 
        String backgroundImage = entity.getBackgroundImage();
        if (backgroundImage != null) {
            stmt.bindString(9, backgroundImage);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(10, location);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(11, icon);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(12, iconUrl);
        }
 
        String guideUrl = entity.getGuideUrl();
        if (guideUrl != null) {
            stmt.bindString(13, guideUrl);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(14, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(15, updatedAt);
        }
 
        String guideGroupId = entity.getGuideGroupId();
        if (guideGroupId != null) {
            stmt.bindString(16, guideGroupId);
        }
    }

    @Override
    protected void attachEntity(Guide entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Guide readEntity(Cursor cursor, int offset) {
        Guide entity = new Guide( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rowStatus
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isFeature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // objects
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // backgroundImage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // location
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // icon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // iconUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // guideUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createdAt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // updatedAt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // guideGroupId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Guide entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRowStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsFeature(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setObjects(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBackgroundImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIconUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGuideUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatedAt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUpdatedAt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGuideGroupId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Guide entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Guide entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "guideList" to-many relationship of GuideGroup. */
    public List<Guide> _queryGuideGroup_GuideList(String guideGroupId) {
        synchronized (this) {
            if (guideGroup_GuideListQuery == null) {
                QueryBuilder<Guide> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GuideGroupId.eq(null));
                guideGroup_GuideListQuery = queryBuilder.build();
            }
        }
        Query<Guide> query = guideGroup_GuideListQuery.forCurrentThread();
        query.setParameter(0, guideGroupId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGuideGroupDao().getAllColumns());
            builder.append(" FROM GUIDE T");
            builder.append(" LEFT JOIN GUIDE_GROUP T0 ON T.\"GUIDE_GROUP_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Guide loadCurrentDeep(Cursor cursor, boolean lock) {
        Guide entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GuideGroup guideGroup = loadCurrentOther(daoSession.getGuideGroupDao(), cursor, offset);
        entity.setGuideGroup(guideGroup);

        return entity;    
    }

    public Guide loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Guide> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Guide> list = new ArrayList<Guide>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Guide> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Guide> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
