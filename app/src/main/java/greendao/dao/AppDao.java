package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.App;
import greendao.bean.Guide;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, String> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property AndroidLink = new Property(2, String.class, "androidLink", false, "ANDROID_LINK");
        public final static Property IpadLink = new Property(3, String.class, "ipadLink", false, "IPAD_LINK");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property AppUrl = new Property(5, String.class, "appUrl", false, "APP_URL");
        public final static Property Weight = new Property(6, Integer.class, "weight", false, "WEIGHT");
        public final static Property Comments = new Property(7, Integer.class, "comments", false, "COMMENTS");
        public final static Property Likes = new Property(8, Integer.class, "likes", false, "LIKES");
        public final static Property Logo = new Property(9, String.class, "logo", false, "LOGO");
        public final static Property RowStatus = new Property(10, String.class, "rowStatus", false, "ROW_STATUS");
        public final static Property IphoneLink = new Property(11, String.class, "iphoneLink", false, "IPHONE_LINK");
        public final static Property CreatedAt = new Property(12, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(13, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property GuideId = new Property(14, String.class, "guideId", false, "GUIDE_ID");
    };

    private DaoSession daoSession;

    private Query<App> guide_AppListQuery;

    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"DESC\" TEXT," + // 1: desc
                "\"ANDROID_LINK\" TEXT," + // 2: androidLink
                "\"IPAD_LINK\" TEXT," + // 3: ipadLink
                "\"TITLE\" TEXT," + // 4: title
                "\"APP_URL\" TEXT," + // 5: appUrl
                "\"WEIGHT\" INTEGER," + // 6: weight
                "\"COMMENTS\" INTEGER," + // 7: comments
                "\"LIKES\" INTEGER," + // 8: likes
                "\"LOGO\" TEXT," + // 9: logo
                "\"ROW_STATUS\" TEXT," + // 10: rowStatus
                "\"IPHONE_LINK\" TEXT," + // 11: iphoneLink
                "\"CREATED_AT\" TEXT," + // 12: createdAt
                "\"UPDATED_AT\" TEXT," + // 13: updatedAt
                "\"GUIDE_ID\" TEXT);"); // 14: guideId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, App entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        String androidLink = entity.getAndroidLink();
        if (androidLink != null) {
            stmt.bindString(3, androidLink);
        }
 
        String ipadLink = entity.getIpadLink();
        if (ipadLink != null) {
            stmt.bindString(4, ipadLink);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String appUrl = entity.getAppUrl();
        if (appUrl != null) {
            stmt.bindString(6, appUrl);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(7, weight);
        }
 
        Integer comments = entity.getComments();
        if (comments != null) {
            stmt.bindLong(8, comments);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(9, likes);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(10, logo);
        }
 
        String rowStatus = entity.getRowStatus();
        if (rowStatus != null) {
            stmt.bindString(11, rowStatus);
        }
 
        String iphoneLink = entity.getIphoneLink();
        if (iphoneLink != null) {
            stmt.bindString(12, iphoneLink);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(13, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(14, updatedAt);
        }
 
        String guideId = entity.getGuideId();
        if (guideId != null) {
            stmt.bindString(15, guideId);
        }
    }

    @Override
    protected void attachEntity(App entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // androidLink
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ipadLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appUrl
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // comments
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // likes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // logo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rowStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // iphoneLink
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createdAt
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updatedAt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // guideId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAndroidLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIpadLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setComments(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLikes(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLogo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRowStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIphoneLink(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreatedAt(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdatedAt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGuideId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(App entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(App entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "appList" to-many relationship of Guide. */
    public List<App> _queryGuide_AppList(String guideId) {
        synchronized (this) {
            if (guide_AppListQuery == null) {
                QueryBuilder<App> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GuideId.eq(null));
                guide_AppListQuery = queryBuilder.build();
            }
        }
        Query<App> query = guide_AppListQuery.forCurrentThread();
        query.setParameter(0, guideId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGuideDao().getAllColumns());
            builder.append(" FROM APP T");
            builder.append(" LEFT JOIN GUIDE T0 ON T.\"GUIDE_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected App loadCurrentDeep(Cursor cursor, boolean lock) {
        App entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Guide guide = loadCurrentOther(daoSession.getGuideDao(), cursor, offset);
        entity.setGuide(guide);

        return entity;    
    }

    public App loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<App> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<App> list = new ArrayList<App>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<App> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<App> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
