package greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import greendao.bean.History;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HISTORY".
*/
public class HistoryDao extends AbstractDao<History, String> {

    public static final String TABLENAME = "HISTORY";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SearchContent = new Property(0, String.class, "searchContent", true, "SEARCH_CONTENT");
        public final static Property SearchType = new Property(1, String.class, "searchType", false, "SEARCH_TYPE");
        public final static Property SearchDate = new Property(2, java.util.Date.class, "searchDate", false, "SEARCH_DATE");
    };


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY\" (" + //
                "\"SEARCH_CONTENT\" TEXT PRIMARY KEY NOT NULL ," + // 0: searchContent
                "\"SEARCH_TYPE\" TEXT," + // 1: searchType
                "\"SEARCH_DATE\" INTEGER);"); // 2: searchDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, History entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSearchContent());
 
        String searchType = entity.getSearchType();
        if (searchType != null) {
            stmt.bindString(2, searchType);
        }
 
        java.util.Date searchDate = entity.getSearchDate();
        if (searchDate != null) {
            stmt.bindLong(3, searchDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.getString(offset + 0), // searchContent
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchType
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)) // searchDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setSearchContent(cursor.getString(offset + 0));
        entity.setSearchType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearchDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(History entity, long rowId) {
        return entity.getSearchContent();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(History entity) {
        if(entity != null) {
            return entity.getSearchContent();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
