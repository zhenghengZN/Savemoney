package greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import greendao.bean.Collection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COLLECTION".
*/
public class CollectionDao extends AbstractDao<Collection, String> {

    public static final String TABLENAME = "COLLECTION";

    /**
     * Properties of entity Collection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property GuideType = new Property(1, String.class, "guideType", false, "GUIDE_TYPE");
        public final static Property CollectionTab = new Property(2, String.class, "collectionTab", false, "COLLECTION_TAB");
        public final static Property SessionToken = new Property(3, String.class, "sessionToken", false, "SESSION_TOKEN");
        public final static Property CollectionDate = new Property(4, java.util.Date.class, "collectionDate", false, "COLLECTION_DATE");
    };


    public CollectionDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"GUIDE_TYPE\" TEXT," + // 1: guideType
                "\"COLLECTION_TAB\" TEXT," + // 2: collectionTab
                "\"SESSION_TOKEN\" TEXT," + // 3: sessionToken
                "\"COLLECTION_DATE\" INTEGER);"); // 4: collectionDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Collection entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String guideType = entity.getGuideType();
        if (guideType != null) {
            stmt.bindString(2, guideType);
        }
 
        String collectionTab = entity.getCollectionTab();
        if (collectionTab != null) {
            stmt.bindString(3, collectionTab);
        }
 
        String sessionToken = entity.getSessionToken();
        if (sessionToken != null) {
            stmt.bindString(4, sessionToken);
        }
 
        java.util.Date collectionDate = entity.getCollectionDate();
        if (collectionDate != null) {
            stmt.bindLong(5, collectionDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Collection readEntity(Cursor cursor, int offset) {
        Collection entity = new Collection( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guideType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // collectionTab
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionToken
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // collectionDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Collection entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setGuideType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCollectionTab(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollectionDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Collection entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Collection entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
