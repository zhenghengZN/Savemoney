package greendao.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseOpenHelper;
import de.greenrobot.dao.database.EncryptedDatabaseOpenHelper;
import de.greenrobot.dao.database.StandardDatabase;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 2): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        LocationDao.createTable(db, ifNotExists);
        GuideGroupDao.createTable(db, ifNotExists);
        GuideDao.createTable(db, ifNotExists);
        VisaDao.createTable(db, ifNotExists);
        ArticleDao.createTable(db, ifNotExists);
        FoodDao.createTable(db, ifNotExists);
        ContactDao.createTable(db, ifNotExists);
        AppDao.createTable(db, ifNotExists);
        ProductDao.createTable(db, ifNotExists);
        RouteDao.createTable(db, ifNotExists);
        PlaceDao.createTable(db, ifNotExists);
        HotelDao.createTable(db, ifNotExists);
        RestaurantDao.createTable(db, ifNotExists);
        AttractionDao.createTable(db, ifNotExists);
        MenuDao.createTable(db, ifNotExists);
        MenuSectionDao.createTable(db, ifNotExists);
        MenuItemDao.createTable(db, ifNotExists);
        MenuItemOptionDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        DocumentDao.createTable(db, ifNotExists);
        AirlineDao.createTable(db, ifNotExists);
        ActivityDao.createTable(db, ifNotExists);
        MallDao.createTable(db, ifNotExists);
        StationDao.createTable(db, ifNotExists);
        CollectionDao.createTable(db, ifNotExists);
        DraftBoxDao.createTable(db, ifNotExists);
        HistoryDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        LocationDao.dropTable(db, ifExists);
        GuideGroupDao.dropTable(db, ifExists);
        GuideDao.dropTable(db, ifExists);
        VisaDao.dropTable(db, ifExists);
        ArticleDao.dropTable(db, ifExists);
        FoodDao.dropTable(db, ifExists);
        ContactDao.dropTable(db, ifExists);
        AppDao.dropTable(db, ifExists);
        ProductDao.dropTable(db, ifExists);
        RouteDao.dropTable(db, ifExists);
        PlaceDao.dropTable(db, ifExists);
        HotelDao.dropTable(db, ifExists);
        RestaurantDao.dropTable(db, ifExists);
        AttractionDao.dropTable(db, ifExists);
        MenuDao.dropTable(db, ifExists);
        MenuSectionDao.dropTable(db, ifExists);
        MenuItemDao.dropTable(db, ifExists);
        MenuItemOptionDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        DocumentDao.dropTable(db, ifExists);
        AirlineDao.dropTable(db, ifExists);
        ActivityDao.dropTable(db, ifExists);
        MallDao.dropTable(db, ifExists);
        StationDao.dropTable(db, ifExists);
        CollectionDao.dropTable(db, ifExists);
        DraftBoxDao.dropTable(db, ifExists);
        HistoryDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }
        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public static abstract class EncryptedOpenHelper extends EncryptedDatabaseOpenHelper {
        public EncryptedOpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public EncryptedOpenHelper(Context context, String name, Object cursorFactory, boolean loadNativeLibs) {
            super(context, name, cursorFactory, SCHEMA_VERSION, loadNativeLibs);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class EncryptedDevOpenHelper extends EncryptedOpenHelper {
        public EncryptedDevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public EncryptedDevOpenHelper(Context context, String name, Object cursorFactory, boolean loadNativeLibs) {
            super(context, name, cursorFactory, loadNativeLibs);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(LocationDao.class);
        registerDaoClass(GuideGroupDao.class);
        registerDaoClass(GuideDao.class);
        registerDaoClass(VisaDao.class);
        registerDaoClass(ArticleDao.class);
        registerDaoClass(FoodDao.class);
        registerDaoClass(ContactDao.class);
        registerDaoClass(AppDao.class);
        registerDaoClass(ProductDao.class);
        registerDaoClass(RouteDao.class);
        registerDaoClass(PlaceDao.class);
        registerDaoClass(HotelDao.class);
        registerDaoClass(RestaurantDao.class);
        registerDaoClass(AttractionDao.class);
        registerDaoClass(MenuDao.class);
        registerDaoClass(MenuSectionDao.class);
        registerDaoClass(MenuItemDao.class);
        registerDaoClass(MenuItemOptionDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(DocumentDao.class);
        registerDaoClass(AirlineDao.class);
        registerDaoClass(ActivityDao.class);
        registerDaoClass(MallDao.class);
        registerDaoClass(StationDao.class);
        registerDaoClass(CollectionDao.class);
        registerDaoClass(DraftBoxDao.class);
        registerDaoClass(HistoryDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
