package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import greendao.bean.Place;
import greendao.bean.Restaurant;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RESTAURANT".
*/
public class RestaurantDao extends AbstractDao<Restaurant, String> {

    public static final String TABLENAME = "RESTAURANT";

    /**
     * Properties of entity Restaurant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property DiningStyle = new Property(1, String.class, "diningStyle", false, "DINING_STYLE");
        public final static Property PaymentOptions = new Property(2, String.class, "paymentOptions", false, "PAYMENT_OPTIONS");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property DressCode = new Property(4, String.class, "dressCode", false, "DRESS_CODE");
        public final static Property Payment = new Property(5, String.class, "payment", false, "PAYMENT");
        public final static Property Cuisines = new Property(6, String.class, "cuisines", false, "CUISINES");
        public final static Property PriceRangeFrom = new Property(7, Integer.class, "priceRangeFrom", false, "PRICE_RANGE_FROM");
        public final static Property ExecutiveChef = new Property(8, String.class, "executiveChef", false, "EXECUTIVE_CHEF");
        public final static Property SpecialEventsAndPromotions = new Property(9, String.class, "specialEventsAndPromotions", false, "SPECIAL_EVENTS_AND_PROMOTIONS");
        public final static Property Area = new Property(10, String.class, "area", false, "AREA");
        public final static Property PriceRangeTo = new Property(11, Integer.class, "priceRangeTo", false, "PRICE_RANGE_TO");
        public final static Property Average = new Property(12, Integer.class, "average", false, "AVERAGE");
        public final static Property ParkingDetails = new Property(13, String.class, "parkingDetails", false, "PARKING_DETAILS");
        public final static Property Additional = new Property(14, String.class, "additional", false, "ADDITIONAL");
        public final static Property PublicTransport = new Property(15, String.class, "publicTransport", false, "PUBLIC_TRANSPORT");
        public final static Property Menus = new Property(16, String.class, "menus", false, "MENUS");
        public final static Property Zomato = new Property(17, String.class, "zomato", false, "ZOMATO");
        public final static Property OpenTable = new Property(18, String.class, "openTable", false, "OPEN_TABLE");
        public final static Property CreatedAt = new Property(19, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(20, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property PlaceId = new Property(21, String.class, "placeId", false, "PLACE_ID");
    };

    private DaoSession daoSession;


    public RestaurantDao(DaoConfig config) {
        super(config);
    }
    
    public RestaurantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESTAURANT\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"DINING_STYLE\" TEXT," + // 1: diningStyle
                "\"PAYMENT_OPTIONS\" TEXT," + // 2: paymentOptions
                "\"DESC\" TEXT," + // 3: desc
                "\"DRESS_CODE\" TEXT," + // 4: dressCode
                "\"PAYMENT\" TEXT," + // 5: payment
                "\"CUISINES\" TEXT," + // 6: cuisines
                "\"PRICE_RANGE_FROM\" INTEGER," + // 7: priceRangeFrom
                "\"EXECUTIVE_CHEF\" TEXT," + // 8: executiveChef
                "\"SPECIAL_EVENTS_AND_PROMOTIONS\" TEXT," + // 9: specialEventsAndPromotions
                "\"AREA\" TEXT," + // 10: area
                "\"PRICE_RANGE_TO\" INTEGER," + // 11: priceRangeTo
                "\"AVERAGE\" INTEGER," + // 12: average
                "\"PARKING_DETAILS\" TEXT," + // 13: parkingDetails
                "\"ADDITIONAL\" TEXT," + // 14: additional
                "\"PUBLIC_TRANSPORT\" TEXT," + // 15: publicTransport
                "\"MENUS\" TEXT," + // 16: menus
                "\"ZOMATO\" TEXT," + // 17: zomato
                "\"OPEN_TABLE\" TEXT," + // 18: openTable
                "\"CREATED_AT\" TEXT," + // 19: createdAt
                "\"UPDATED_AT\" TEXT," + // 20: updatedAt
                "\"PLACE_ID\" TEXT);"); // 21: placeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESTAURANT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Restaurant entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String diningStyle = entity.getDiningStyle();
        if (diningStyle != null) {
            stmt.bindString(2, diningStyle);
        }
 
        String paymentOptions = entity.getPaymentOptions();
        if (paymentOptions != null) {
            stmt.bindString(3, paymentOptions);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String dressCode = entity.getDressCode();
        if (dressCode != null) {
            stmt.bindString(5, dressCode);
        }
 
        String payment = entity.getPayment();
        if (payment != null) {
            stmt.bindString(6, payment);
        }
 
        String cuisines = entity.getCuisines();
        if (cuisines != null) {
            stmt.bindString(7, cuisines);
        }
 
        Integer priceRangeFrom = entity.getPriceRangeFrom();
        if (priceRangeFrom != null) {
            stmt.bindLong(8, priceRangeFrom);
        }
 
        String executiveChef = entity.getExecutiveChef();
        if (executiveChef != null) {
            stmt.bindString(9, executiveChef);
        }
 
        String specialEventsAndPromotions = entity.getSpecialEventsAndPromotions();
        if (specialEventsAndPromotions != null) {
            stmt.bindString(10, specialEventsAndPromotions);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(11, area);
        }
 
        Integer priceRangeTo = entity.getPriceRangeTo();
        if (priceRangeTo != null) {
            stmt.bindLong(12, priceRangeTo);
        }
 
        Integer average = entity.getAverage();
        if (average != null) {
            stmt.bindLong(13, average);
        }
 
        String parkingDetails = entity.getParkingDetails();
        if (parkingDetails != null) {
            stmt.bindString(14, parkingDetails);
        }
 
        String additional = entity.getAdditional();
        if (additional != null) {
            stmt.bindString(15, additional);
        }
 
        String publicTransport = entity.getPublicTransport();
        if (publicTransport != null) {
            stmt.bindString(16, publicTransport);
        }
 
        String menus = entity.getMenus();
        if (menus != null) {
            stmt.bindString(17, menus);
        }
 
        String zomato = entity.getZomato();
        if (zomato != null) {
            stmt.bindString(18, zomato);
        }
 
        String openTable = entity.getOpenTable();
        if (openTable != null) {
            stmt.bindString(19, openTable);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(20, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(21, updatedAt);
        }
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(22, placeId);
        }
    }

    @Override
    protected void attachEntity(Restaurant entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Restaurant readEntity(Cursor cursor, int offset) {
        Restaurant entity = new Restaurant( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // diningStyle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // paymentOptions
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dressCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // payment
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cuisines
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // priceRangeFrom
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // executiveChef
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // specialEventsAndPromotions
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // area
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // priceRangeTo
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // average
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // parkingDetails
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // additional
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // publicTransport
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // menus
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // zomato
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // openTable
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createdAt
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // updatedAt
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // placeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Restaurant entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setDiningStyle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPaymentOptions(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDressCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCuisines(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPriceRangeFrom(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setExecutiveChef(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSpecialEventsAndPromotions(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArea(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPriceRangeTo(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAverage(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setParkingDetails(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAdditional(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPublicTransport(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMenus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setZomato(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOpenTable(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreatedAt(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdatedAt(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPlaceId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Restaurant entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Restaurant entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlaceDao().getAllColumns());
            builder.append(" FROM RESTAURANT T");
            builder.append(" LEFT JOIN PLACE T0 ON T.\"PLACE_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Restaurant loadCurrentDeep(Cursor cursor, boolean lock) {
        Restaurant entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Place place = loadCurrentOther(daoSession.getPlaceDao(), cursor, offset);
        entity.setPlace(place);

        return entity;    
    }

    public Restaurant loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Restaurant> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Restaurant> list = new ArrayList<Restaurant>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Restaurant> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Restaurant> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
