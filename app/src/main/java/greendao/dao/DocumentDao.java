package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.Activity;
import greendao.bean.App;
import greendao.bean.Article;
import greendao.bean.Document;
import greendao.bean.Food;
import greendao.bean.Guide;
import greendao.bean.Place;
import greendao.bean.Product;
import greendao.bean.Route;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOCUMENT".
*/
public class DocumentDao extends AbstractDao<Document, String> {

    public static final String TABLENAME = "DOCUMENT";

    /**
     * Properties of entity Document.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Caption = new Property(1, String.class, "caption", false, "CAPTION");
        public final static Property OriginalName = new Property(2, String.class, "originalName", false, "ORIGINAL_NAME");
        public final static Property File = new Property(3, String.class, "file", false, "FILE");
        public final static Property RowStatus = new Property(4, String.class, "rowStatus", false, "ROW_STATUS");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property ContentType = new Property(6, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Metadata = new Property(7, String.class, "metadata", false, "METADATA");
        public final static Property PlaceCoverImageId = new Property(8, String.class, "placeCoverImageId", false, "PLACE_COVER_IMAGE_ID");
        public final static Property IconId = new Property(9, String.class, "iconId", false, "ICON_ID");
        public final static Property CreatedAt = new Property(10, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(11, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property AppId = new Property(12, String.class, "appId", false, "APP_ID");
        public final static Property GuideId = new Property(13, String.class, "guideId", false, "GUIDE_ID");
        public final static Property ArticleId = new Property(14, String.class, "articleId", false, "ARTICLE_ID");
        public final static Property FoodId = new Property(15, String.class, "foodId", false, "FOOD_ID");
        public final static Property PlacePhotosId = new Property(16, String.class, "placePhotosId", false, "PLACE_PHOTOS_ID");
        public final static Property ProductId = new Property(17, String.class, "productId", false, "PRODUCT_ID");
        public final static Property RouteId = new Property(18, String.class, "routeId", false, "ROUTE_ID");
        public final static Property ActivityId = new Property(19, String.class, "activityId", false, "ACTIVITY_ID");
    };

    private DaoSession daoSession;

    private Query<Document> article_ArticlePhotoListQuery;
    private Query<Document> food_FoodPhotoListQuery;
    private Query<Document> place_PlacePhotoListQuery;
    private Query<Document> product_ProductPhotoListQuery;
    private Query<Document> route_RoutePhotoListQuery;
    private Query<Document> activity_ActivityPhotoListQuery;

    public DocumentDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCUMENT\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"CAPTION\" TEXT," + // 1: caption
                "\"ORIGINAL_NAME\" TEXT," + // 2: originalName
                "\"FILE\" TEXT," + // 3: file
                "\"ROW_STATUS\" TEXT," + // 4: rowStatus
                "\"URL\" TEXT," + // 5: url
                "\"CONTENT_TYPE\" TEXT," + // 6: contentType
                "\"METADATA\" TEXT," + // 7: metadata
                "\"PLACE_COVER_IMAGE_ID\" TEXT," + // 8: placeCoverImageId
                "\"ICON_ID\" TEXT," + // 9: iconId
                "\"CREATED_AT\" TEXT," + // 10: createdAt
                "\"UPDATED_AT\" TEXT," + // 11: updatedAt
                "\"APP_ID\" TEXT," + // 12: appId
                "\"GUIDE_ID\" TEXT," + // 13: guideId
                "\"ARTICLE_ID\" TEXT," + // 14: articleId
                "\"FOOD_ID\" TEXT," + // 15: foodId
                "\"PLACE_PHOTOS_ID\" TEXT," + // 16: placePhotosId
                "\"PRODUCT_ID\" TEXT," + // 17: productId
                "\"ROUTE_ID\" TEXT," + // 18: routeId
                "\"ACTIVITY_ID\" TEXT);"); // 19: activityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCUMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Document entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(2, caption);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(3, originalName);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(4, file);
        }
 
        String rowStatus = entity.getRowStatus();
        if (rowStatus != null) {
            stmt.bindString(5, rowStatus);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(7, contentType);
        }
 
        String metadata = entity.getMetadata();
        if (metadata != null) {
            stmt.bindString(8, metadata);
        }
 
        String placeCoverImageId = entity.getPlaceCoverImageId();
        if (placeCoverImageId != null) {
            stmt.bindString(9, placeCoverImageId);
        }
 
        String iconId = entity.getIconId();
        if (iconId != null) {
            stmt.bindString(10, iconId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(11, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(12, updatedAt);
        }
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(13, appId);
        }
 
        String guideId = entity.getGuideId();
        if (guideId != null) {
            stmt.bindString(14, guideId);
        }
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(15, articleId);
        }
 
        String foodId = entity.getFoodId();
        if (foodId != null) {
            stmt.bindString(16, foodId);
        }
 
        String placePhotosId = entity.getPlacePhotosId();
        if (placePhotosId != null) {
            stmt.bindString(17, placePhotosId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(18, productId);
        }
 
        String routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindString(19, routeId);
        }
 
        String activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindString(20, activityId);
        }
    }

    @Override
    protected void attachEntity(Document entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Document readEntity(Cursor cursor, int offset) {
        Document entity = new Document( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caption
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // originalName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // file
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rowStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // metadata
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // placeCoverImageId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // iconId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createdAt
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updatedAt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // appId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // guideId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // articleId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // foodId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // placePhotosId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // productId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // routeId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // activityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Document entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setCaption(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOriginalName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRowStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMetadata(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlaceCoverImageId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIconId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatedAt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdatedAt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAppId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGuideId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setArticleId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFoodId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPlacePhotosId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setProductId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRouteId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setActivityId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Document entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Document entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "articlePhotoList" to-many relationship of Article. */
    public List<Document> _queryArticle_ArticlePhotoList(String articleId) {
        synchronized (this) {
            if (article_ArticlePhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ArticleId.eq(null));
                article_ArticlePhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = article_ArticlePhotoListQuery.forCurrentThread();
        query.setParameter(0, articleId);
        return query.list();
    }

    /** Internal query to resolve the "foodPhotoList" to-many relationship of Food. */
    public List<Document> _queryFood_FoodPhotoList(String foodId) {
        synchronized (this) {
            if (food_FoodPhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FoodId.eq(null));
                food_FoodPhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = food_FoodPhotoListQuery.forCurrentThread();
        query.setParameter(0, foodId);
        return query.list();
    }

    /** Internal query to resolve the "placePhotoList" to-many relationship of Place. */
    public List<Document> _queryPlace_PlacePhotoList(String placePhotosId) {
        synchronized (this) {
            if (place_PlacePhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlacePhotosId.eq(null));
                place_PlacePhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = place_PlacePhotoListQuery.forCurrentThread();
        query.setParameter(0, placePhotosId);
        return query.list();
    }

    /** Internal query to resolve the "productPhotoList" to-many relationship of Product. */
    public List<Document> _queryProduct_ProductPhotoList(String productId) {
        synchronized (this) {
            if (product_ProductPhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                product_ProductPhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = product_ProductPhotoListQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    /** Internal query to resolve the "routePhotoList" to-many relationship of Route. */
    public List<Document> _queryRoute_RoutePhotoList(String routeId) {
        synchronized (this) {
            if (route_RoutePhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RouteId.eq(null));
                route_RoutePhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = route_RoutePhotoListQuery.forCurrentThread();
        query.setParameter(0, routeId);
        return query.list();
    }

    /** Internal query to resolve the "activityPhotoList" to-many relationship of Activity. */
    public List<Document> _queryActivity_ActivityPhotoList(String activityId) {
        synchronized (this) {
            if (activity_ActivityPhotoListQuery == null) {
                QueryBuilder<Document> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActivityId.eq(null));
                activity_ActivityPhotoListQuery = queryBuilder.build();
            }
        }
        Query<Document> query = activity_ActivityPhotoListQuery.forCurrentThread();
        query.setParameter(0, activityId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAppDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGuideDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getArticleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getFoodDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPlaceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getProductDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getRouteDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getActivityDao().getAllColumns());
            builder.append(" FROM DOCUMENT T");
            builder.append(" LEFT JOIN APP T0 ON T.\"APP_ID\"=T0.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN GUIDE T1 ON T.\"GUIDE_ID\"=T1.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN ARTICLE T2 ON T.\"ARTICLE_ID\"=T2.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN FOOD T3 ON T.\"FOOD_ID\"=T3.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN PLACE T4 ON T.\"PLACE_PHOTOS_ID\"=T4.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN PRODUCT T5 ON T.\"PRODUCT_ID\"=T5.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN ROUTE T6 ON T.\"ROUTE_ID\"=T6.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN ACTIVITY T7 ON T.\"ACTIVITY_ID\"=T7.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Document loadCurrentDeep(Cursor cursor, boolean lock) {
        Document entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        App app = loadCurrentOther(daoSession.getAppDao(), cursor, offset);
        entity.setApp(app);
        offset += daoSession.getAppDao().getAllColumns().length;

        Guide guide = loadCurrentOther(daoSession.getGuideDao(), cursor, offset);
        entity.setGuide(guide);
        offset += daoSession.getGuideDao().getAllColumns().length;

        Article article = loadCurrentOther(daoSession.getArticleDao(), cursor, offset);
        entity.setArticle(article);
        offset += daoSession.getArticleDao().getAllColumns().length;

        Food food = loadCurrentOther(daoSession.getFoodDao(), cursor, offset);
        entity.setFood(food);
        offset += daoSession.getFoodDao().getAllColumns().length;

        Place place = loadCurrentOther(daoSession.getPlaceDao(), cursor, offset);
        entity.setPlace(place);
        offset += daoSession.getPlaceDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);
        offset += daoSession.getProductDao().getAllColumns().length;

        Route route = loadCurrentOther(daoSession.getRouteDao(), cursor, offset);
        entity.setRoute(route);
        offset += daoSession.getRouteDao().getAllColumns().length;

        Activity activity = loadCurrentOther(daoSession.getActivityDao(), cursor, offset);
        entity.setActivity(activity);

        return entity;    
    }

    public Document loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Document> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Document> list = new ArrayList<Document>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Document> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Document> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
