package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.Food;
import greendao.bean.Guide;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FOOD".
*/
public class FoodDao extends AbstractDao<Food, String> {

    public static final String TABLENAME = "FOOD";

    /**
     * Properties of entity Food.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Index = new Property(1, Integer.class, "index", false, "INDEX");
        public final static Property Comments = new Property(2, Integer.class, "comments", false, "COMMENTS");
        public final static Property Likes = new Property(3, Integer.class, "likes", false, "LIKES");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property RowStatus = new Property(6, String.class, "rowStatus", false, "ROW_STATUS");
        public final static Property Photos = new Property(7, String.class, "photos", false, "PHOTOS");
        public final static Property Places = new Property(8, String.class, "places", false, "PLACES");
        public final static Property SuggestedPrice = new Property(9, Integer.class, "suggestedPrice", false, "SUGGESTED_PRICE");
        public final static Property Cuisines = new Property(10, String.class, "cuisines", false, "CUISINES");
        public final static Property Rating = new Property(11, Double.class, "rating", false, "RATING");
        public final static Property Urls = new Property(12, String.class, "urls", false, "URLS");
        public final static Property CreatedAt = new Property(13, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property GuideId = new Property(15, String.class, "guideId", false, "GUIDE_ID");
    };

    private DaoSession daoSession;

    private Query<Food> guide_FoodListQuery;

    public FoodDao(DaoConfig config) {
        super(config);
    }
    
    public FoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"INDEX\" INTEGER," + // 1: index
                "\"COMMENTS\" INTEGER," + // 2: comments
                "\"LIKES\" INTEGER," + // 3: likes
                "\"DESC\" TEXT," + // 4: desc
                "\"TITLE\" TEXT," + // 5: title
                "\"ROW_STATUS\" TEXT," + // 6: rowStatus
                "\"PHOTOS\" TEXT," + // 7: photos
                "\"PLACES\" TEXT," + // 8: places
                "\"SUGGESTED_PRICE\" INTEGER," + // 9: suggestedPrice
                "\"CUISINES\" TEXT," + // 10: cuisines
                "\"RATING\" REAL," + // 11: rating
                "\"URLS\" TEXT," + // 12: urls
                "\"CREATED_AT\" TEXT," + // 13: createdAt
                "\"UPDATED_AT\" TEXT," + // 14: updatedAt
                "\"GUIDE_ID\" TEXT);"); // 15: guideId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Food entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        Integer comments = entity.getComments();
        if (comments != null) {
            stmt.bindLong(3, comments);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(4, likes);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String rowStatus = entity.getRowStatus();
        if (rowStatus != null) {
            stmt.bindString(7, rowStatus);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(8, photos);
        }
 
        String places = entity.getPlaces();
        if (places != null) {
            stmt.bindString(9, places);
        }
 
        Integer suggestedPrice = entity.getSuggestedPrice();
        if (suggestedPrice != null) {
            stmt.bindLong(10, suggestedPrice);
        }
 
        String cuisines = entity.getCuisines();
        if (cuisines != null) {
            stmt.bindString(11, cuisines);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(12, rating);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(13, urls);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(14, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(15, updatedAt);
        }
 
        String guideId = entity.getGuideId();
        if (guideId != null) {
            stmt.bindString(16, guideId);
        }
    }

    @Override
    protected void attachEntity(Food entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Food readEntity(Cursor cursor, int offset) {
        Food entity = new Food( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // comments
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // likes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rowStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photos
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // places
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // suggestedPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cuisines
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // rating
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // urls
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createdAt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // updatedAt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // guideId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Food entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComments(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLikes(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRowStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhotos(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlaces(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSuggestedPrice(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCuisines(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRating(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setUrls(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatedAt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUpdatedAt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGuideId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Food entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Food entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "foodList" to-many relationship of Guide. */
    public List<Food> _queryGuide_FoodList(String guideId) {
        synchronized (this) {
            if (guide_FoodListQuery == null) {
                QueryBuilder<Food> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GuideId.eq(null));
                guide_FoodListQuery = queryBuilder.build();
            }
        }
        Query<Food> query = guide_FoodListQuery.forCurrentThread();
        query.setParameter(0, guideId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGuideDao().getAllColumns());
            builder.append(" FROM FOOD T");
            builder.append(" LEFT JOIN GUIDE T0 ON T.\"GUIDE_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Food loadCurrentDeep(Cursor cursor, boolean lock) {
        Food entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Guide guide = loadCurrentOther(daoSession.getGuideDao(), cursor, offset);
        entity.setGuide(guide);

        return entity;    
    }

    public Food loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Food> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Food> list = new ArrayList<Food>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Food> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Food> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
