package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import greendao.bean.Hotel;
import greendao.bean.Place;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HOTEL".
*/
public class HotelDao extends AbstractDao<Hotel, String> {

    public static final String TABLENAME = "HOTEL";

    /**
     * Properties of entity Hotel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Rooms = new Property(1, Integer.class, "rooms", false, "ROOMS");
        public final static Property Features = new Property(2, String.class, "features", false, "FEATURES");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Photos = new Property(4, String.class, "photos", false, "PHOTOS");
        public final static Property Booking = new Property(5, String.class, "booking", false, "BOOKING");
        public final static Property Checkout = new Property(6, String.class, "checkout", false, "CHECKOUT");
        public final static Property Checkin = new Property(7, String.class, "checkin", false, "CHECKIN");
        public final static Property Agoda = new Property(8, String.class, "agoda", false, "AGODA");
        public final static Property Minrate = new Property(9, Double.class, "minrate", false, "MINRATE");
        public final static Property Maxrate = new Property(10, Double.class, "maxrate", false, "MAXRATE");
        public final static Property CreatedAt = new Property(11, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(12, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property PlaceId = new Property(13, String.class, "placeId", false, "PLACE_ID");
    };

    private DaoSession daoSession;


    public HotelDao(DaoConfig config) {
        super(config);
    }
    
    public HotelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOTEL\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"ROOMS\" INTEGER," + // 1: rooms
                "\"FEATURES\" TEXT," + // 2: features
                "\"DESC\" TEXT," + // 3: desc
                "\"PHOTOS\" TEXT," + // 4: photos
                "\"BOOKING\" TEXT," + // 5: booking
                "\"CHECKOUT\" TEXT," + // 6: checkout
                "\"CHECKIN\" TEXT," + // 7: checkin
                "\"AGODA\" TEXT," + // 8: agoda
                "\"MINRATE\" REAL," + // 9: minrate
                "\"MAXRATE\" REAL," + // 10: maxrate
                "\"CREATED_AT\" TEXT," + // 11: createdAt
                "\"UPDATED_AT\" TEXT," + // 12: updatedAt
                "\"PLACE_ID\" TEXT);"); // 13: placeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOTEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Hotel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        Integer rooms = entity.getRooms();
        if (rooms != null) {
            stmt.bindLong(2, rooms);
        }
 
        String features = entity.getFeatures();
        if (features != null) {
            stmt.bindString(3, features);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(5, photos);
        }
 
        String booking = entity.getBooking();
        if (booking != null) {
            stmt.bindString(6, booking);
        }
 
        String checkout = entity.getCheckout();
        if (checkout != null) {
            stmt.bindString(7, checkout);
        }
 
        String checkin = entity.getCheckin();
        if (checkin != null) {
            stmt.bindString(8, checkin);
        }
 
        String agoda = entity.getAgoda();
        if (agoda != null) {
            stmt.bindString(9, agoda);
        }
 
        Double minrate = entity.getMinrate();
        if (minrate != null) {
            stmt.bindDouble(10, minrate);
        }
 
        Double maxrate = entity.getMaxrate();
        if (maxrate != null) {
            stmt.bindDouble(11, maxrate);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(12, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(13, updatedAt);
        }
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(14, placeId);
        }
    }

    @Override
    protected void attachEntity(Hotel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Hotel readEntity(Cursor cursor, int offset) {
        Hotel entity = new Hotel( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // rooms
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // features
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photos
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // booking
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkout
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // agoda
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // minrate
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // maxrate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createdAt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updatedAt
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // placeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Hotel entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setRooms(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFeatures(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhotos(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBooking(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckout(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAgoda(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMinrate(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setMaxrate(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setCreatedAt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedAt(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPlaceId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Hotel entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Hotel entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlaceDao().getAllColumns());
            builder.append(" FROM HOTEL T");
            builder.append(" LEFT JOIN PLACE T0 ON T.\"PLACE_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Hotel loadCurrentDeep(Cursor cursor, boolean lock) {
        Hotel entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Place place = loadCurrentOther(daoSession.getPlaceDao(), cursor, offset);
        entity.setPlace(place);

        return entity;    
    }

    public Hotel loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Hotel> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Hotel> list = new ArrayList<Hotel>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Hotel> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Hotel> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
