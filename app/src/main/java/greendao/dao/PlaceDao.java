package greendao.dao;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.Food;
import greendao.bean.Guide;
import greendao.bean.Place;
import greendao.bean.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PLACE".
*/
public class PlaceDao extends AbstractDao<Place, String> {

    public static final String TABLENAME = "PLACE";

    /**
     * Properties of entity Place.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property NameCn = new Property(3, String.class, "nameCn", false, "NAME_CN");
        public final static Property Telephone = new Property(4, String.class, "telephone", false, "TELEPHONE");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Subcategory = new Property(6, String.class, "subcategory", false, "SUBCATEGORY");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property Fax = new Property(9, String.class, "fax", false, "FAX");
        public final static Property Types = new Property(10, String.class, "types", false, "TYPES");
        public final static Property Longitude = new Property(11, Double.class, "longitude", false, "LONGITUDE");
        public final static Property State = new Property(12, String.class, "state", false, "STATE");
        public final static Property Rating = new Property(13, Double.class, "rating", false, "RATING");
        public final static Property Weight = new Property(14, Integer.class, "weight", false, "WEIGHT");
        public final static Property Postcode = new Property(15, String.class, "postcode", false, "POSTCODE");
        public final static Property HoursOfOperation = new Property(16, String.class, "hoursOfOperation", false, "HOURS_OF_OPERATION");
        public final static Property Photos = new Property(17, String.class, "photos", false, "PHOTOS");
        public final static Property CoverImage = new Property(18, String.class, "coverImage", false, "COVER_IMAGE");
        public final static Property HowToGetThere = new Property(19, String.class, "howToGetThere", false, "HOW_TO_GET_THERE");
        public final static Property Area = new Property(20, String.class, "area", false, "AREA");
        public final static Property Website = new Property(21, String.class, "website", false, "WEBSITE");
        public final static Property Latitude = new Property(22, Double.class, "latitude", false, "LATITUDE");
        public final static Property Feature = new Property(23, Boolean.class, "feature", false, "FEATURE");
        public final static Property Country = new Property(24, String.class, "country", false, "COUNTRY");
        public final static Property RowStatus = new Property(25, String.class, "rowStatus", false, "ROW_STATUS");
        public final static Property Attraction = new Property(26, String.class, "attraction", false, "ATTRACTION");
        public final static Property Restaurant = new Property(27, String.class, "restaurant", false, "RESTAURANT");
        public final static Property Hotel = new Property(28, String.class, "hotel", false, "HOTEL");
        public final static Property ExtraInfo = new Property(29, String.class, "extraInfo", false, "EXTRA_INFO");
        public final static Property Neighborhood = new Property(30, String.class, "neighborhood", false, "NEIGHBORHOOD");
        public final static Property Mall = new Property(31, String.class, "mall", false, "MALL");
        public final static Property Urls = new Property(32, String.class, "urls", false, "URLS");
        public final static Property PlaceUrl = new Property(33, String.class, "placeUrl", false, "PLACE_URL");
        public final static Property Station = new Property(34, String.class, "station", false, "STATION");
        public final static Property CreatedAt = new Property(35, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(36, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property NeighborhoodId = new Property(37, String.class, "neighborhoodId", false, "NEIGHBORHOOD_ID");
        public final static Property FoodId = new Property(38, String.class, "foodId", false, "FOOD_ID");
        public final static Property ProductId = new Property(39, String.class, "productId", false, "PRODUCT_ID");
        public final static Property GuideId = new Property(40, String.class, "guideId", false, "GUIDE_ID");
    };

    private DaoSession daoSession;

    private Query<Place> place_NeighborhoodListQuery;
    private Query<Place> food_PlaceListQuery;
    private Query<Place> product_PlaceListQuery;
    private Query<Place> guide_PlaceListQuery;

    public PlaceDao(DaoConfig config) {
        super(config);
    }
    
    public PlaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLACE\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"CATEGORY\" TEXT," + // 1: category
                "\"ADDRESS\" TEXT," + // 2: address
                "\"NAME_CN\" TEXT," + // 3: nameCn
                "\"TELEPHONE\" TEXT," + // 4: telephone
                "\"EMAIL\" TEXT," + // 5: email
                "\"SUBCATEGORY\" TEXT," + // 6: subcategory
                "\"NAME\" TEXT," + // 7: name
                "\"CITY\" TEXT," + // 8: city
                "\"FAX\" TEXT," + // 9: fax
                "\"TYPES\" TEXT," + // 10: types
                "\"LONGITUDE\" REAL," + // 11: longitude
                "\"STATE\" TEXT," + // 12: state
                "\"RATING\" REAL," + // 13: rating
                "\"WEIGHT\" INTEGER," + // 14: weight
                "\"POSTCODE\" TEXT," + // 15: postcode
                "\"HOURS_OF_OPERATION\" TEXT," + // 16: hoursOfOperation
                "\"PHOTOS\" TEXT," + // 17: photos
                "\"COVER_IMAGE\" TEXT," + // 18: coverImage
                "\"HOW_TO_GET_THERE\" TEXT," + // 19: howToGetThere
                "\"AREA\" TEXT," + // 20: area
                "\"WEBSITE\" TEXT," + // 21: website
                "\"LATITUDE\" REAL," + // 22: latitude
                "\"FEATURE\" INTEGER," + // 23: feature
                "\"COUNTRY\" TEXT," + // 24: country
                "\"ROW_STATUS\" TEXT," + // 25: rowStatus
                "\"ATTRACTION\" TEXT," + // 26: attraction
                "\"RESTAURANT\" TEXT," + // 27: restaurant
                "\"HOTEL\" TEXT," + // 28: hotel
                "\"EXTRA_INFO\" TEXT," + // 29: extraInfo
                "\"NEIGHBORHOOD\" TEXT," + // 30: neighborhood
                "\"MALL\" TEXT," + // 31: mall
                "\"URLS\" TEXT," + // 32: urls
                "\"PLACE_URL\" TEXT," + // 33: placeUrl
                "\"STATION\" TEXT," + // 34: station
                "\"CREATED_AT\" TEXT," + // 35: createdAt
                "\"UPDATED_AT\" TEXT," + // 36: updatedAt
                "\"NEIGHBORHOOD_ID\" TEXT," + // 37: neighborhoodId
                "\"FOOD_ID\" TEXT," + // 38: foodId
                "\"PRODUCT_ID\" TEXT," + // 39: productId
                "\"GUIDE_ID\" TEXT);"); // 40: guideId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Place entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String nameCn = entity.getNameCn();
        if (nameCn != null) {
            stmt.bindString(4, nameCn);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String subcategory = entity.getSubcategory();
        if (subcategory != null) {
            stmt.bindString(7, subcategory);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(10, fax);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(11, types);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(12, longitude);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(13, state);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(14, rating);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(15, weight);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(16, postcode);
        }
 
        String hoursOfOperation = entity.getHoursOfOperation();
        if (hoursOfOperation != null) {
            stmt.bindString(17, hoursOfOperation);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(18, photos);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(19, coverImage);
        }
 
        String howToGetThere = entity.getHowToGetThere();
        if (howToGetThere != null) {
            stmt.bindString(20, howToGetThere);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(21, area);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(22, website);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(23, latitude);
        }
 
        Boolean feature = entity.getFeature();
        if (feature != null) {
            stmt.bindLong(24, feature ? 1L: 0L);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(25, country);
        }
 
        String rowStatus = entity.getRowStatus();
        if (rowStatus != null) {
            stmt.bindString(26, rowStatus);
        }
 
        String attraction = entity.getAttraction();
        if (attraction != null) {
            stmt.bindString(27, attraction);
        }
 
        String restaurant = entity.getRestaurant();
        if (restaurant != null) {
            stmt.bindString(28, restaurant);
        }
 
        String hotel = entity.getHotel();
        if (hotel != null) {
            stmt.bindString(29, hotel);
        }
 
        String extraInfo = entity.getExtraInfo();
        if (extraInfo != null) {
            stmt.bindString(30, extraInfo);
        }
 
        String neighborhood = entity.getNeighborhood();
        if (neighborhood != null) {
            stmt.bindString(31, neighborhood);
        }
 
        String mall = entity.getMall();
        if (mall != null) {
            stmt.bindString(32, mall);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(33, urls);
        }
 
        String placeUrl = entity.getPlaceUrl();
        if (placeUrl != null) {
            stmt.bindString(34, placeUrl);
        }
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(35, station);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(36, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(37, updatedAt);
        }
 
        String neighborhoodId = entity.getNeighborhoodId();
        if (neighborhoodId != null) {
            stmt.bindString(38, neighborhoodId);
        }
 
        String foodId = entity.getFoodId();
        if (foodId != null) {
            stmt.bindString(39, foodId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(40, productId);
        }
 
        String guideId = entity.getGuideId();
        if (guideId != null) {
            stmt.bindString(41, guideId);
        }
    }

    @Override
    protected void attachEntity(Place entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Place readEntity(Cursor cursor, int offset) {
        Place entity = new Place( //
            cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameCn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // subcategory
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // types
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // longitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // state
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // rating
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // weight
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // postcode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // hoursOfOperation
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // photos
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // coverImage
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // howToGetThere
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // area
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // website
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // latitude
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // feature
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // country
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // rowStatus
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // attraction
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // restaurant
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // hotel
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // extraInfo
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // neighborhood
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // mall
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // urls
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // placeUrl
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // station
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // createdAt
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // updatedAt
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // neighborhoodId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // foodId
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // productId
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40) // guideId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Place entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNameCn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubcategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTypes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRating(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setWeight(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setPostcode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHoursOfOperation(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPhotos(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCoverImage(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHowToGetThere(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setArea(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWebsite(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLatitude(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setFeature(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setCountry(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRowStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setAttraction(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRestaurant(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setHotel(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setExtraInfo(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setNeighborhood(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMall(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUrls(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setPlaceUrl(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setStation(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setCreatedAt(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setUpdatedAt(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setNeighborhoodId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFoodId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setProductId(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setGuideId(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Place entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Place entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "neighborhoodList" to-many relationship of Place. */
    public List<Place> _queryPlace_NeighborhoodList(String neighborhoodId) {
        synchronized (this) {
            if (place_NeighborhoodListQuery == null) {
                QueryBuilder<Place> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NeighborhoodId.eq(null));
                place_NeighborhoodListQuery = queryBuilder.build();
            }
        }
        Query<Place> query = place_NeighborhoodListQuery.forCurrentThread();
        query.setParameter(0, neighborhoodId);
        return query.list();
    }

    /** Internal query to resolve the "placeList" to-many relationship of Food. */
    public List<Place> _queryFood_PlaceList(String foodId) {
        synchronized (this) {
            if (food_PlaceListQuery == null) {
                QueryBuilder<Place> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FoodId.eq(null));
                food_PlaceListQuery = queryBuilder.build();
            }
        }
        Query<Place> query = food_PlaceListQuery.forCurrentThread();
        query.setParameter(0, foodId);
        return query.list();
    }

    /** Internal query to resolve the "placeList" to-many relationship of Product. */
    public List<Place> _queryProduct_PlaceList(String productId) {
        synchronized (this) {
            if (product_PlaceListQuery == null) {
                QueryBuilder<Place> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                product_PlaceListQuery = queryBuilder.build();
            }
        }
        Query<Place> query = product_PlaceListQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    /** Internal query to resolve the "placeList" to-many relationship of Guide. */
    public List<Place> _queryGuide_PlaceList(String guideId) {
        synchronized (this) {
            if (guide_PlaceListQuery == null) {
                QueryBuilder<Place> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GuideId.eq(null));
                guide_PlaceListQuery = queryBuilder.build();
            }
        }
        Query<Place> query = guide_PlaceListQuery.forCurrentThread();
        query.setParameter(0, guideId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlaceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFoodDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProductDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getGuideDao().getAllColumns());
            builder.append(" FROM PLACE T");
            builder.append(" LEFT JOIN PLACE T0 ON T.\"NEIGHBORHOOD_ID\"=T0.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN FOOD T1 ON T.\"FOOD_ID\"=T1.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN PRODUCT T2 ON T.\"PRODUCT_ID\"=T2.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN GUIDE T3 ON T.\"GUIDE_ID\"=T3.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Place loadCurrentDeep(Cursor cursor, boolean lock) {
        Place entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Place place = loadCurrentOther(daoSession.getPlaceDao(), cursor, offset);
        entity.setPlace(place);
        offset += daoSession.getPlaceDao().getAllColumns().length;

        Food food = loadCurrentOther(daoSession.getFoodDao(), cursor, offset);
        entity.setFood(food);
        offset += daoSession.getFoodDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);
        offset += daoSession.getProductDao().getAllColumns().length;

        Guide guide = loadCurrentOther(daoSession.getGuideDao(), cursor, offset);
        entity.setGuide(guide);

        return entity;    
    }

    public Place loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Place> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Place> list = new ArrayList<Place>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Place> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Place> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
