package greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.internal.DaoConfig;
import greendao.bean.DraftBox;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DRAFT_BOX".
*/
public class DraftBoxDao extends AbstractDao<DraftBox, Long> {

    public static final String TABLENAME = "DRAFT_BOX";

    /**
     * Properties of entity DraftBox.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ChannelId = new Property(2, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Latitude = new Property(5, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Price = new Property(7, Double.class, "price", false, "PRICE");
        public final static Property ImgList = new Property(8, String.class, "imgList", false, "IMG_LIST");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Tags = new Property(11, String.class, "tags", false, "TAGS");
        public final static Property PurchaseChannel = new Property(12, String.class, "purchaseChannel", false, "PURCHASE_CHANNEL");
        public final static Property DepartureAirprtId = new Property(13, String.class, "departureAirprtId", false, "DEPARTURE_AIRPRT_ID");
        public final static Property ArrivalAirportId = new Property(14, String.class, "arrivalAirportId", false, "ARRIVAL_AIRPORT_ID");
        public final static Property DepartureAirprtName = new Property(15, String.class, "departureAirprtName", false, "DEPARTURE_AIRPRT_NAME");
        public final static Property ArrivalAirportName = new Property(16, String.class, "arrivalAirportName", false, "ARRIVAL_AIRPORT_NAME");
        public final static Property DepartureTimeZoneName = new Property(17, String.class, "departureTimeZoneName", false, "DEPARTURE_TIME_ZONE_NAME");
        public final static Property ArrivalTimeZoneName = new Property(18, String.class, "arrivalTimeZoneName", false, "ARRIVAL_TIME_ZONE_NAME");
        public final static Property CreateAt = new Property(19, java.util.Date.class, "createAt", false, "CREATE_AT");
        public final static Property StartTime = new Property(20, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(21, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property DepartureTime = new Property(22, java.util.Date.class, "departureTime", false, "DEPARTURE_TIME");
        public final static Property ArrivalTime = new Property(23, java.util.Date.class, "arrivalTime", false, "ARRIVAL_TIME");
        public final static Property Duration = new Property(24, Integer.class, "duration", false, "DURATION");
        public final static Property UpdateAt = new Property(25, java.util.Date.class, "updateAt", false, "UPDATE_AT");
    };


    public DraftBoxDao(DaoConfig config) {
        super(config);
    }
    
    public DraftBoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRAFT_BOX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CHANNEL_ID\" TEXT," + // 2: channelId
                "\"CONTENT\" TEXT," + // 3: content
                "\"ADDRESS\" TEXT," + // 4: address
                "\"LATITUDE\" REAL," + // 5: latitude
                "\"LONGITUDE\" REAL," + // 6: longitude
                "\"PRICE\" REAL," + // 7: price
                "\"IMG_LIST\" TEXT," + // 8: imgList
                "\"USER_ID\" TEXT," + // 9: userId
                "\"TYPE\" TEXT," + // 10: type
                "\"TAGS\" TEXT," + // 11: tags
                "\"PURCHASE_CHANNEL\" TEXT," + // 12: purchaseChannel
                "\"DEPARTURE_AIRPRT_ID\" TEXT," + // 13: departureAirprtId
                "\"ARRIVAL_AIRPORT_ID\" TEXT," + // 14: arrivalAirportId
                "\"DEPARTURE_AIRPRT_NAME\" TEXT," + // 15: departureAirprtName
                "\"ARRIVAL_AIRPORT_NAME\" TEXT," + // 16: arrivalAirportName
                "\"DEPARTURE_TIME_ZONE_NAME\" TEXT," + // 17: departureTimeZoneName
                "\"ARRIVAL_TIME_ZONE_NAME\" TEXT," + // 18: arrivalTimeZoneName
                "\"CREATE_AT\" INTEGER," + // 19: createAt
                "\"START_TIME\" INTEGER," + // 20: startTime
                "\"END_TIME\" INTEGER," + // 21: endTime
                "\"DEPARTURE_TIME\" INTEGER," + // 22: departureTime
                "\"ARRIVAL_TIME\" INTEGER," + // 23: arrivalTime
                "\"DURATION\" INTEGER," + // 24: duration
                "\"UPDATE_AT\" INTEGER);"); // 25: updateAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRAFT_BOX\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, DraftBox entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(6, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(7, longitude);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(8, price);
        }
 
        String imgList = entity.getImgList();
        if (imgList != null) {
            stmt.bindString(9, imgList);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(12, tags);
        }
 
        String purchaseChannel = entity.getPurchaseChannel();
        if (purchaseChannel != null) {
            stmt.bindString(13, purchaseChannel);
        }
 
        String departureAirprtId = entity.getDepartureAirprtId();
        if (departureAirprtId != null) {
            stmt.bindString(14, departureAirprtId);
        }
 
        String arrivalAirportId = entity.getArrivalAirportId();
        if (arrivalAirportId != null) {
            stmt.bindString(15, arrivalAirportId);
        }
 
        String departureAirprtName = entity.getDepartureAirprtName();
        if (departureAirprtName != null) {
            stmt.bindString(16, departureAirprtName);
        }
 
        String arrivalAirportName = entity.getArrivalAirportName();
        if (arrivalAirportName != null) {
            stmt.bindString(17, arrivalAirportName);
        }
 
        String departureTimeZoneName = entity.getDepartureTimeZoneName();
        if (departureTimeZoneName != null) {
            stmt.bindString(18, departureTimeZoneName);
        }
 
        String arrivalTimeZoneName = entity.getArrivalTimeZoneName();
        if (arrivalTimeZoneName != null) {
            stmt.bindString(19, arrivalTimeZoneName);
        }
 
        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(20, createAt.getTime());
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(21, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(22, endTime.getTime());
        }
 
        java.util.Date departureTime = entity.getDepartureTime();
        if (departureTime != null) {
            stmt.bindLong(23, departureTime.getTime());
        }
 
        java.util.Date arrivalTime = entity.getArrivalTime();
        if (arrivalTime != null) {
            stmt.bindLong(24, arrivalTime.getTime());
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(25, duration);
        }
 
        java.util.Date updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindLong(26, updateAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DraftBox readEntity(Cursor cursor, int offset) {
        DraftBox entity = new DraftBox( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imgList
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tags
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // purchaseChannel
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // departureAirprtId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // arrivalAirportId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // departureAirprtName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // arrivalAirportName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // departureTimeZoneName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // arrivalTimeZoneName
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // createAt
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // startTime
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // endTime
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // departureTime
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // arrivalTime
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // duration
            cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)) // updateAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DraftBox entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setImgList(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTags(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPurchaseChannel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDepartureAirprtId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setArrivalAirportId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDepartureAirprtName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setArrivalAirportName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDepartureTimeZoneName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setArrivalTimeZoneName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreateAt(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setStartTime(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setEndTime(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setDepartureTime(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setArrivalTime(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setDuration(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setUpdateAt(cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DraftBox entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DraftBox entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
